#library "HXAMODCM"
#include "zcommon.acs"

// Mod Master Tokens
	#libdefine hxmod_none "HXMOD_VANILLA"
	#libdefine hxmod_resettoken "HXMOD_IDontExist"
	#libdefine hxmod_modfound "HXMOD_MODFOUND"
	#libdefine hxmod_64art "HXMOD_Doom64Art"
	#libdefine hxmod_acideriguns "HXMOD_AcidEriguns"
	#libdefine hxmod_bdlite "HXMOD_BDLite"
	#libdefine hxmod_beautifuldoom "HXMOD_BeautifulDoom"
	#libdefine hxmod_brutaldoom "HXMOD_BrutalDoom"
	#libdefine hxmod_brutaldoom64 "HXMOD_BrutalDoom64"
	#libdefine hxmod_brutaldoomce "HXMOD_BrutalDoomBWCE"
	#libdefine hxmod_brutaldoomplat "HXMOD_BrutalDoomPlatinum"
	#libdefine hxmod_CED64 "HXMOD_DoomCE_D64"
	#libdefine hxmod_CEPSX "HXMOD_DoomCE_PSX"
	#libdefine hxmod_combinedarms "HXMOD_CombinedArms"
	#libdefine hxmod_combinedarmsgaiden "HXMOD_CombinedArmsGaiden"
	#libdefine hxmod_D4V "HXMOD_Doom4Vanilla"
	#libdefine hxmod_D64RTR "HXMOD_Doom64RTR"
	#libdefine hxmod_faspons "HXMOD_Faspons"
	#libdefine hxmod_kriegsland1 "HXMOD_Kriegsland1"
	#libdefine hxmod_kriegsland2 "HXMOD_Kriegsland2"
	#libdefine hxmod_ledgwmtoken "HXMOD_LedsGenericWeaponMod"
	#libdefine hxmod_lttyphon "HXMOD_BadAssBitch"
	#libdefine hxmod_meatgrinder "HXMOD_Meatgrinder"
	#libdefine hxmod_meatgrindermre "HXMOD_Meatgrinder_MRE"
	#libdefine hxmod_nazisv2 "HXMOD_NazisV2"
	#libdefine hxmod_omniwolf "HXMOD_OmniWolf"
	#libdefine hxmod_perksmoothenh "HXMOD_PerkSmootherWeaponsEnh"
	#libdefine hxmod_smoothdoom "HXMOD_SmoothDoom2"
	#libdefine hxmod_supercharge "HXMOD_Supercharge"
	#libdefine hxmod_ziobrutalwolf "HXMOD_ZioBrutalWolfenstein"

// HUD Mode Switch
	#libdefine hxsys_lowmotion "HXCUS_LowMotionToken"
	#libdefine hxsys_normalhudkiller "HXSYS_NormalHUDKillerToken"
	#libdefine hxsys_transformhud "HXSYS_TransformationHUDToken"
	#libdefine hxsys_vehiclehud "HXSYS_VehicleHUDToken"

// Functionality Overrides
	#libdefine hxmod_weapondualwielduniqueammo "HXMOD_WeaponDualWieldUniqueAmmo"
	#libdefine hxmod_weapononlyammo1 "HXMOD_WeaponOnlyAmmo1"

// General Items
	#libdefine vanillaberserk "Power#libdefineength"
	#libdefine hxgen_berserk "HX_BerserkPowerUpToken"
	#libdefine hxgen_haste "HX_HastePowerUpToken"
	#libdefine hxgen_hasteshort "HX_HastePowerUpShortToken"
	#libdefine hxgen_hastelongtimer "HX_HastePowerUpLongTimerToken"
	#libdefine vanillainfrared "PowerLightamp"
	#libdefine hxgen_infrared "HX_InfraredPowerUpToken"
	#libdefine hxgen_infraredlongtimer "HX_InfraredPowerUpLongTimerToken"
	#libdefine vanillainvisibility "PowerInvisibility"
	#libdefine hxgen_invisibility "HX_InvisibilityPowerUpToken"
	#libdefine hxgen_invisibilitylongtimer "HX_InvisibilityPowerUpLongTimerToken"
	#libdefine vanillainvulnerability "PowerInvulnerable"
	#libdefine hxgen_invulnerability "HX_InvulnerabilityPowerUpToken"
	#libdefine hxgen_invulnerabilitylongtimer "HX_InvulnerabilityPowerUpLongTimerToken"
	#libdefine hxgen_quaddamage "HX_QuadDamagePowerUpToken"
	#libdefine hxgen_quaddamagelongtimer "HX_QuadDamagePowerUpLongTimerToken"
	#libdefine vanillaradsuit "PowerIronfeet"
	#libdefine hxgen_radsuit "HX_RadSuitPowerUpToken"
	#libdefine hxgen_radsuitlongtimer "HX_RadSuitPowerUpLongTimerToken"
	/* #libdefine vanillabluecard "BlueCard"
	#libdefine hxgen_bluecard "HX_BlueCardKeyToken"
	#libdefine vanillablueskull "BlueSkull"
	#libdefine hxgen_blueskull "HX_BlueSkullKeyToken"
	#libdefine vanillaredcard "RedCard"
	#libdefine hxgen_redcard "HX_RedCardKeyToken"
	#libdefine vanillaredskull "RedSkull"
	#libdefine hxgen_redskull "HX_RedSkullKeyToken"
	#libdefine vanillayellowcard "YellowCard"
	#libdefine hxgen_yellowcard "HX_YellowCardKeyToken"
	#libdefine vanillayellowskull "YellowSkull"
	#libdefine hxgen_yellowskull "HX_YellowSkullKeyToken" */

// Ac!d's Eriguns
	#libdefine acidclass "EriPlayer"
	#libdefine acidfist "EriFist"
	#libdefine acidpistol "EriPistol"

// Beautiful Doom
	#libdefine beautifulbloodcontrol "BD_BloodyPrintControl"
	#libdefine beautifuloverlaycontrol "BD_OverlayControl"
	#libdefine beautifulweaponcontrol "BD_WeaponPickupControl"

// BDLite
	#libdefine bdliteclass "Doomer"
	#libdefine bdlitefist "BdMeleeAttacks"
	#libdefine bdliterifle "BdRifle"

// Brutal Doom General
	#libdefine bdgenplayer "IsPlayer"
	#libdefine bditemnottactical "IsNOTTacticalClass"
	#libdefine bditempurist "IsPlayingAsPurist"
	#libdefine bditemtactical "IsTacticalClass"
	/* #libdefine bdclassarcadedoomer "Arcade Rifle (No Reload)"
	#libdefine bdclassarcadedoomer2 "Arcade Pistol (No Reload)"
	#libdefine bdclassarcadedoomer3 "Arcade Shotgun (No Reload)"
	#libdefine bdclassbdoomer "BDoomer"
	#libdefine bdclassdoomer2 "Doomer2"
	#libdefine bdclassdoomer3 "Shotgun Start" */

// Brutal Doom Platinum
	#libdefine bdplattotallyamenudummy "IsNOTAMenuDummy"

// Brutal Doom 64
	#libdefine bd64classbasic "64DoomPlayer"
	#libdefine bd64classmodern "Modern"
	#libdefine bd64classtactical "Tactical64DoomPlayer"
	#libdefine bd64classtacticalpistol "Tactical64DoomPlayer_P"
	#libdefine bd64fist "64Fist"
	#libdefine bd64fisttactical "64FistTactical"
	#libdefine bd64pistol "64Pistol"
	#libdefine bd64pistoltactical "64PistolTactical"
	#libdefine bd64rifletactical "64RifleTactical"

// Brutal Wolfenstein (ZioMcCall)
	#libdefine bwzioclass "Doomer2"
	#libdefine bwziofist "Melee_Attacks"
	#libdefine bwziopistolammo "LUGERAmmoAlt"

// Combined_Arms
	#libdefine combinedarmsclassarti "Artificer"
	#libdefine combinedarmsclassblast "BlastMaster"
	#libdefine combinedarmsclasslink "PastLinked"
	#libdefine combinedarmsclassmonk "TechMonk"
	#libdefine combinedarmssekrit "seekritthing"

// Doom 4 Vanilla
	#libdefine d4vclass "DoomSlayer"
	#libdefine d4vfist "DH_Fist"
	#libdefine d4vpistol "DH_Pistol2"

// Doom 64 Retribution
	#libdefine d64rtrclass "64DoomPlayer"
	#libdefine d64rtrfist "64Fist"
	#libdefine d64rtrplaying "IsPlaying"

// Doom CE - D64 and PSX
	#libdefine doomced64class "D64DoomPlayer"
	#libdefine doomced64fist "D64Fist"
	#libdefine doomced64pistol "D64Pistol"
	#libdefine doomcepsxclass "PsxDoomPlayer"
	#libdefine doomcepsxfist "PsxFist"
	#libdefine doomcepsxpistol "PsxPistol"

// Faspons
	#libdefine fasponsclass "FasPlayer"
	#libdefine fasponsfist "Knuckles"
	#libdefine fasponsrifle "CombatRifle"

// Kriegsland 1: Blutorden
	#libdefine kriegsland1class "FKPlayer"
	#libdefine kriegsland1grenades "HDGrenades"
	#libdefine kriegsland1melee "HDKnife"

// Kriegsland 2: Untergrund
	#libdefine kriegsland2class "K2Player"
	#libdefine kriegsland2melee "K2WeaponB"
	#libdefine kriegsland2pistol "K2WeaponC"

// Led's Generic Weapon Mod
	#libdefine ledclass "DoomGuy"
	#libdefine ledfist "Knuckle"
	#libdefine ledminigunmag "MinigunMag"

// Lt. Typhon
	#libdefine typhonclass "VeteranDoomPlayer"
	#libdefine typhonbio "VeteranBioAttack"
	#libdefine typhondumbbell "VeteranDumbbell"

// Meatgrinder
	#libdefine meatgrinderfist "GrinderFist"
	#libdefine meatgrindergrenade "GrenadeAmmo"

// NAZIS V2
	#libdefine nazisv2class "WWNazisPlayer"
	#libdefine nazisv2grenade "GrenadePickup"
	#libdefine nazisv2revolvermag "WeaselsRevolverLoaded"

// NAZIS V2
	#libdefine omniwolfammo "WolfBullets"
	#libdefine omniwolfclass "BJBlazko"
	#libdefine omniwolfpistol "WolfPistol"

// PerK's Smoother Weapon Animations Enhanced
	#libdefine perkzfist "ZPerkFist"
	#libdefine perkzpistol "ZPerkPistol"

// SmoothDoom 2.0 WIP
	#libdefine smoothdoomclass "PerkDPlayer"
	#libdefine smoothdoomfist "PerkFist"
	#libdefine smoothdoompistol "PerkPistol"

// Supercharge 2.8
	#libdefine superchargefist "TangoFist"
	#libdefine superchargepistol "TangoPistol"
	#libdefine superchargerifleammo "AssaultRifleAmmo"

script "HXS_ModCompatibilityStartup" enter
{
	// Hud Killer for mod checking
/* 	if (!CheckInventory(hxmod_modfound))
	{
		GiveInventory(hxsys_normalhudkiller, 1);
	} */

	// Mod Master Tokens
	// Ac!d's Eriguns
		if (CheckActorClass(0, acidclass)
			&& CheckInventory(acidfist)
			&& CheckInventory(acidpistol)
			&& !CheckInventory(hxmod_acideriguns))
		{
			GiveInventory(hxmod_modfound, 1);
			GiveInventory(hxmod_acideriguns, 1);
			if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
		}	
	// Beautiful Doom 7.1.6
		else if (CheckInventory(beautifulbloodcontrol)
			&& CheckInventory(beautifuloverlaycontrol)
			&& CheckInventory(beautifulweaponcontrol)
			&& !CheckInventory(hxmod_beautifuldoom))
		{
			GiveInventory(hxmod_modfound, 1);
			GiveInventory(hxmod_beautifuldoom, 1);
			if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
		}	
	// BDLite
		else if (CheckActorClass(0, bdliteclass)
			&& CheckInventory(bdlitefist)
			&& CheckInventory(bdliterifle)
			&& !CheckInventory(hxmod_bdlite))
		{
			GiveInventory(hxmod_modfound, 1);
			GiveInventory(hxmod_bdlite, 1);
			if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
		}	
	// Brutal Doom 64 && Doom 64: Retribution (due to shared startup actor names)
		else if ((CheckInventory(bd64fist)
				|| CheckInventory(bd64fisttactical))
			&& (!CheckInventory(hxmod_brutaldoom64)
				|| !CheckInventory(hxmod_D64RTR)))
		{
			/* log(s:"Running BD64/D64RTR Check"); */
			// Brutal Doom 64
			if (!CheckInventory(d64rtrplaying)
			&& (CheckActorClass(0, bd64classbasic)
				|| CheckActorClass(0, bd64classtactical)
				|| CheckActorClass(0, bd64classtacticalpistol)
				|| CheckActorClass(0, bd64classmodern))
			&& (CheckInventory(bd64Pistol)
				|| CheckInventory(bd64pistoltactical)
				|| CheckInventory(bd64rifletactical)))
			{
				GiveInventory(hxmod_modfound, 1);
				GiveInventory(hxmod_brutaldoom64, 1);
				GiveInventory(hxmod_64art, 1);
				if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
				/* log(s:"BD64 Caught"); */
			}

			// Doom 64: Retribution
			if (!CheckInventory(hxmod_D64RTR)
			&& CheckInventory(d64rtrplaying)
			&& CheckActorClass(0, d64rtrclass)
			&& CheckInventory(d64rtrfist))
			{
				GiveInventory(hxmod_modfound, 1);
				GiveInventory(hxmod_D64RTR, 1);
				GiveInventory(hxmod_64art, 1);
				/* log(s:"D64:RTR Caught"); */
				if (CheckInventory(hxmod_brutaldoom64)) { TakeInventory(hxmod_brutaldoom64, 1); /* log(s:"Removing BD64 token"); */ }
				if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
			}
		}
	// Brutal Doom General
		else if (CheckInventory(bdgenplayer)
			&& !CheckInventory(hxmod_brutaldoom))
		{
			// Brutal Doom Platinum
			if (CheckInventory(bdplattotallyamenudummy))
			{
				GiveInventory(hxmod_modfound, 1);
				GiveInventory(hxmod_brutaldoom, 1);
				GiveInventory(hxmod_brutaldoomplat, 1);
				if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
			}
			// Brutal Wolfenstein (ZioMcCall)
			else if (CheckActorClass(0, bwzioclass)
					&& CheckInventory(bwziofist)
					&& CheckInventory(bwziopistolammo)
					&& !CheckInventory(hxmod_ziobrutalwolf))
			{
				GiveInventory(hxmod_modfound, 1);
				GiveInventory(hxmod_brutaldoom, 1);
				GiveInventory(hxmod_ziobrutalwolf, 1);
				if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
			}
			// Brutal Doom v21 / CE
			else if (CheckInventory(bditemnottactical)
					|| CheckInventory(bditemtactical)
					|| CheckInventory(bditempurist))
			{
				GiveInventory(hxmod_modfound, 1);
				GiveInventory(hxmod_brutaldoom, 1);
				if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
			}
		}
	// Combined_Arms & Combined_Arms Gaiden
		else if ((CheckActorClass(0, combinedarmsclassarti)
			|| CheckActorClass(0, combinedarmsclassblast)
			|| CheckActorClass(0, combinedarmsclasslink)
			|| CheckActorClass(0, combinedarmsclassmonk))
			&& !CheckInventory(hxmod_combinedarms))
		{
			if (CheckInventory(combinedarmssekrit))
			{
				GiveInventory(hxmod_modfound, 1);
				GiveInventory(hxmod_combinedarms, 1);
				if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
			}
			else
			{
				GiveInventory(hxmod_modfound, 1);
				GiveInventory(hxmod_combinedarmsgaiden, 1);
				if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
			}
		}
	// Doom 4 Vanilla
		else if (CheckActorClass(0, d4vclass)
			&& CheckInventory(d4vfist)
			&& CheckInventory(d4vpistol)
			&& !CheckInventory(hxmod_D4V))
		{
			GiveInventory(hxmod_modfound, 1);
			GiveInventory(hxmod_D4V, 1);
			if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
		}
	// Doom CE - D64
		else if (CheckActorClass(0, doomced64class)
			&& CheckInventory(doomced64fist)
			&& CheckInventory(doomced64pistol)
			&& !CheckInventory(hxmod_CED64))
		{
			GiveInventory(hxmod_modfound, 1);
			GiveInventory(hxmod_CED64, 1);
			GiveInventory(hxmod_64art, 1);
			if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
		}
	// Doom CE - PSX
		else if (CheckActorClass(0, doomcepsxclass)
			&& CheckInventory(doomcepsxfist)
			&& CheckInventory(doomcepsxpistol)
			&& !CheckInventory(hxmod_CEPSX))
		{
			GiveInventory(hxmod_modfound, 1);
			GiveInventory(hxmod_CEPSX, 1);
			if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
		}
	// Faspons
		else if (CheckActorClass(0, fasponsclass)
			&& CheckInventory(fasponsfist)
			&& CheckInventory(fasponsrifle)
			&& !CheckInventory(hxmod_faspons))
		{
			GiveInventory(hxmod_modfound, 1);
			GiveInventory(hxmod_faspons, 1);
			if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
		}
	// Kriegsland 1: Blutorden
		else if (CheckActorClass(0, kriegsland1class)
			&& CheckInventory(kriegsland1grenades)
			&& CheckInventory(kriegsland1melee)
			&& !CheckInventory(hxmod_kriegsland1))
		{
			GiveInventory(hxmod_modfound, 1);
			GiveInventory(hxmod_kriegsland1, 1);
			if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
		}
	// Kriegsland 2: Untergrund
		else if (CheckActorClass(0, kriegsland2class)
			&& CheckInventory(kriegsland2melee)
			&& CheckInventory(kriegsland2pistol)
			&& !CheckInventory(hxmod_kriegsland2))
		{
			GiveInventory(hxmod_modfound, 1);
			GiveInventory(hxmod_kriegsland2, 1);
			if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
		}
	// Led's Generic Weapon Mod
		else if (CheckActorClass(0, ledclass)
			&& CheckInventory(ledfist)
			&& CheckInventory(ledminigunmag)
			&& !CheckInventory(hxmod_ledgwmtoken))
		{
			GiveInventory(hxmod_modfound, 1);
			GiveInventory(hxmod_ledgwmtoken, 1);
			if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
		}
	// Lt. Typhon
		else if (CheckActorClass(0, typhonclass)
			&& CheckInventory(typhonbio)
			&& CheckInventory(typhondumbbell)
			&& !CheckInventory(hxmod_lttyphon))
		{
			GiveInventory(hxmod_modfound, 1);
			GiveInventory(hxmod_lttyphon, 1);
			if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
		}
	// Meatgrinder
		else if (CheckInventory(meatgrinderfist)
			&& !CheckInventory(hxmod_meatgrinder))
		{
			GiveInventory(hxmod_modfound, 1);
			GiveInventory(hxmod_meatgrinder, 1);
			if (CheckInventory(meatgrindergrenade)) { GiveInventory(hxmod_meatgrindermre, 1); }
			if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
		}
	// NAZIS V2
		else if (CheckActorClass(0, nazisv2class)
			&& CheckInventory(nazisv2grenade)
			&& CheckInventory(nazisv2revolvermag)
			&& !CheckInventory(hxmod_nazisv2))
		{
			GiveInventory(hxmod_modfound, 1);
			GiveInventory(hxmod_nazisv2, 1);
			if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
		}
	// Omni-Wolf
		else if (CheckActorClass(0, omniwolfclass)
			&& CheckInventory(omniwolfammo)
			&& CheckInventory(omniwolfpistol)
			&& !CheckInventory(hxmod_omniwolf))
		{
			GiveInventory(hxmod_modfound, 1);
			GiveInventory(hxmod_omniwolf, 1);
			if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
		}
	// PerK's Smoother Weapon Animations Enhanced
		else if (CheckInventory(perkzfist)
			&& CheckInventory(perkzpistol)
			&& !CheckInventory(hxmod_perksmoothenh))
		{
			GiveInventory(hxmod_modfound, 1);
			GiveInventory(hxmod_perksmoothenh, 1);
			if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
		}
	// SmoothDoom 2.0 WIP
		else if (CheckActorClass(0, smoothdoomclass)
			&& CheckInventory(smoothdoomfist)
			&& CheckInventory(smoothdoompistol)
			&& !CheckInventory(hxmod_smoothdoom))
		{
			GiveInventory(hxmod_modfound, 1);
			GiveInventory(hxmod_smoothdoom, 1);
			if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
		}
	// Supercharge 2.8
		else if (CheckInventory(superchargefist)
			&& CheckInventory(superchargepistol)
			&& CheckInventory(superchargerifleammo)
			&& !CheckInventory(hxmod_supercharge))
		{
			GiveInventory(hxmod_modfound, 1);
			GiveInventory(hxmod_supercharge, 1);
			if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
		}
	// No mod detected
		else if (!CheckInventory(hxmod_modfound)) { GiveInventory(hxmod_none, 1); }
}

function void HXS_ItemManagement (int moditemcount, str hxitem, int hxitemtokens)
{
	if (moditemcount > 0 && moditemcount != hxitemtokens)
	{
		if (moditemcount > hxitemtokens) { GiveInventory(hxitem, moditemcount - hxitemtokens); }
		else if (moditemcount < hxitemtokens) { TakeInventory(hxitem, hxitemtokens - moditemcount); }
	}
	else if (moditemcount <= 0 && hxitemtokens) { TakeInventory(hxitem, hxitemtokens); }
}

function void HXS_ItemSync (str moditem, str hxitem)
{
	int moditemcount = CheckInventory(moditem);
	int hxitemcount = CheckInventory(hxitem);

	HXS_ItemManagement(moditemcount, hxitem, hxitemcount);
}

function void HXS_PowerupTimer (str moditem, str hxitem)
{
	int moditemduration = GetActorPowerupTics(0, moditem) / 35;
	int hxitemcount = CheckInventory(hxitem);

	HXS_ItemManagement(moditemduration, hxitem, hxitemcount);
}