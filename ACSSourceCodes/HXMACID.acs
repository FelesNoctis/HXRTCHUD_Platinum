#library "HXMACID"
#include "zcommon.acs"
#import "HXATOKEN.acs"
#import "HXAMODCM.acs"
#import "HXACVAR.acs"

// Ac!d's Eriguns
	#define eri_buddha "PowerEriBuddha"
	#define hx_eri_buddha "HX_Acid_BuddhaPowerUpToken"
	#define hx_eri_buddhalongtimer "HX_Acid_BuddhaPowerUpLongTimerToken"
	#define eri_haste "EriPowerSpeed"
	#define eri_infrared "PowerEriInfrared"
	#define eri_invisibility "PowerEriBlurSphere"
	#define eri_invulnerability "PowerEriInvulnerabilitySphere"
	#define eri_quaddamage "PowerEriQuadDamage"
	#define eri_radsuit "PowerEriRadSuit"
	#define hx_eri_pins "HX_Acid_Eri_PINS"
	#define hx_eri_pinv "HX_Acid_Eri_PINV"
	#define hx_eri_pstr "HX_Acid_Eri_PSTR"

script "HXS_AcidEriguns35ticHandler" enter
{
	// Wait 35 tics (1sec) before engaging, to make sure the token has been given
	delay(35);

	if (CheckInventory(HXS_GetTokenString(HXMOD_ACIDERIGUNS))) {
		while (true)
		{
/* 		// Key Management Tokens
			// Blue Keys
			HXS_ItemSync(vanillabluecard, hxgen_bluecard);
			HXS_ItemSync(vanillablueskull, hxgen_blueskull);
			// Red Keys
			HXS_ItemSync(vanillaredcard, hxgen_redcard);
			HXS_ItemSync(vanillaredskull, hxgen_redskull);
			// Yellow Keys
			HXS_ItemSync(vanillayellowcard, hxgen_yellowcard);
			HXS_ItemSync(vanillayellowskull, hxgen_yellowskull); */

		// Powerup Management Tokens
			// Berserk
			HXS_ItemSync(HXS_GetTokenString(VANILLABERSERK), HXS_GetTokenString(HXGEN_BERSERK));

		// Timer
			// Wait 35 tics (~1sec) before repeating, since we want this to be a clock
			delay(35);
		}
	}
}

script "HXS_AcidEriguns7ticHandler" enter
{
	// Wait 35 tics (1sec) before engaging, to make sure the token has been given
	delay(35);
	
	if (CheckInventory(HXS_GetTokenString(HXMOD_ACIDERIGUNS))) {
		while (true)
		{
		// Powerup Management Tokens
			// Buddha
			HXS_PowerupTimer(eri_buddha, hx_eri_buddha);
			HXS_PowerupTimer(eri_buddha, hx_eri_buddhalongtimer);
			// Haste
			HXS_PowerupTimer(eri_haste, HXS_GetTokenString(HXGEN_HASTE));
			HXS_PowerupTimer(eri_haste, HXS_GetTokenString(HXGEN_HASTELONGTIMER));
			// Infrared
			HXS_PowerupTimer(eri_infrared, HXS_GetTokenString(HXGEN_INFRARED));
			HXS_PowerupTimer(eri_infrared, HXS_GetTokenString(HXGEN_INFRAREDLONGTIMER));
			// Invisibility
			HXS_PowerupTimer(eri_invisibility, HXS_GetTokenString(HXGEN_INVISIBILITY));
			HXS_PowerupTimer(eri_invisibility, HXS_GetTokenString(HXGEN_INVISIBILITYLONGTIMER));
			// Invulnerability
			HXS_PowerupTimer(eri_invulnerability, HXS_GetTokenString(HXGEN_INVULNERABILITY));
			HXS_PowerupTimer(eri_invulnerability, HXS_GetTokenString(HXGEN_INVULNERABILITYLONGTIMER));
			// Quad Damage
			HXS_PowerupTimer(eri_quaddamage, HXS_GetTokenString(HXGEN_QUADDAMAGE));
			HXS_PowerupTimer(eri_quaddamage, HXS_GetTokenString(HXGEN_QUADDAMAGELONGTIMER));
			// Radsuit
			HXS_PowerupTimer(eri_radsuit, HXS_GetTokenString(HXGEN_RADSUIT));
			HXS_PowerupTimer(eri_radsuit, HXS_GetTokenString(HXGEN_RADSUITLONGTIMER));

		// Powerup Display Toggles
			// Berserk & Quad Damage
			HXF_CVARConvert_Generic("Eri_PSTR", hx_eri_pstr);
			// Invisibility & Haste
			HXF_CVARConvert_Generic("Eri_PINS", hx_eri_pins);
			// Invulnerability & Buddha
			HXF_CVARConvert_Generic("Eri_PINV", hx_eri_pinv);

		// Timer
			// Wait 7 tics (1/5sec) before repeating, since we want this to be reasonably responsive
			delay(7);
		}
	}
}