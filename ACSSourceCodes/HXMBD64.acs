#library "HXMBD64"
#include "zcommon.acs"
#import "HXATOKEN.acs"
#import "HXAMODCM.acs"
#import "HXACVAR.acs"
#import "HXASTATS.acs"

str bd64altlasericon = "AlternativeLaserSkinCvar";
str hx_bd64altlasericontoken = "HX_BD64_altLaserSkinCvar";
str bd64altrifleicon = "AlternativeRifleSkinCvar";
str hx_bd64altrifleicontoken = "HX_BD64_altRifleSkinCvar";
str bd64ammodemonessence = "DemonEssence";
str bd64ammodemonessencetoken = "HX_BD64_demonessencefound";
str bd64bfg9000tactical = "64BFG9000";
str bd64chainguntactical = "64ChaingunTACTICAL";
str bd64classmoderntoken = "IsModern";
str bd64stamina = "Stamina";
int bd64staminamax = 100;

script "HXS_BrutalDoom64_35ticHandler" enter
{
	// Wait 35 tics (1sec) before engaging, to make sure the token has been given
	delay(35);

	if (CheckInventory(HXS_GetTokenString(HXMOD_BRUTALDOOM64))) {
		while (true)
		{
/* 		// Key Management Tokens
			// Blue Keys
			HXS_ItemSync(vanillabluecard, hxgen_bluecard);
			HXS_ItemSync(vanillablueskull, hxgen_blueskull);
			// Red Keys
			HXS_ItemSync(vanillaredcard, hxgen_redcard);
			HXS_ItemSync(vanillaredskull, hxgen_redskull);
			// Yellow Keys
			HXS_ItemSync(vanillayellowcard, hxgen_yellowcard);
			HXS_ItemSync(vanillayellowskull, hxgen_yellowskull); */

		// Powerup Management Tokens
			// Berserk
			HXS_ItemSync(HXS_GetTokenString(VANILLABERSERK), HXS_GetTokenString(HXGEN_BERSERK));

		// Weapon Icon Management Tokens
			HXF_CVARConvert_Generic(bd64altlasericon, hx_bd64altlasericontoken);
			HXF_CVARConvert_Generic(bd64altrifleicon, hx_bd64altrifleicontoken);

		// Timer
			// Wait 35 tics (~1sec) before repeating, since we want this to be a clock
			delay(35);
		}
	}
}

script "HXS_BrutalDoom64_7ticHandler" enter
{
	// Wait 35 tics (1sec) before engaging, to make sure the token has been given
	delay(35);
	
	if (CheckInventory(HXS_GetTokenString(HXMOD_BRUTALDOOM64))) {
		while (true)
		{
		// Stamina Control
			HXS_StamNormal(bd64stamina, bd64staminamax);
		// Powerup Management Tokens
			// Infrared
			HXS_PowerupTimer(HXS_GetTokenString(VANILLAINFRARED), HXS_GetTokenString(HXGEN_INFRARED));
			// Invisibility
			HXS_PowerupTimer(HXS_GetTokenString(VANILLAINVISIBILITY), HXS_GetTokenString(HXGEN_INVISIBILITY));
			// Invulnerability
			HXS_PowerupTimer(HXS_GetTokenString(VANILLAINVULNERABILITY), HXS_GetTokenString(HXGEN_INVULNERABILITY));
			// Radsuit
			HXS_PowerupTimer(HXS_GetTokenString(VANILLARADSUIT), HXS_GetTokenString(HXGEN_RADSUIT));

		// Ammo DemonEssence Appearance Check
			if (CheckInventory(bd64ammodemonessence) && !CheckInventory(bd64ammodemonessencetoken))
				{ GiveInventory(bd64ammodemonessencetoken, 1); }

		// Timer
			// Wait 7 tics (1/5sec) before repeating, since we want this to be reasonably responsive
			delay(7);
		}
	}
}