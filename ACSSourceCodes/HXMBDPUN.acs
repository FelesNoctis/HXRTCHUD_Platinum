#library "HXMBDPUN"
#include "zcommon.acs"
#import "HXATOKEN.acs"
#import "HXAMODCM.acs"
#import "HXMBD.acs"

// Master Tokens
	#define hx_rushactive "HX_BDP_UnmakingSanity"

// HUD States
	#define hxsys_extendedstats "HXCUS_KISExtendedToken"

// Digit Constants
	#define max1 9
	#define max2 99
	#define max3 999
	#define max4 9999
	#define max5 99999
	#define max6 999999

// Randomized Tokens
	#define timer1 "HX_BDP_UTime1"
	#define timer2 "HX_BDP_UTime2"
	#define timer3 "HX_BDP_UTime3"
	#define kills "HX_BDP_UKills"
	#define items "HX_BDP_UItems"
	#define secrets "HX_BDP_USecrets"
	#define totalmonsters "HX_BDP_UTotalMonsters"
	#define totalitems "HX_BDP_UTotalItems"
	#define totalsecrets "HX_BDP_UTotalSecrets"
	#define buff1 "HX_BDP_UBuff1"
	#define buff2 "HX_BDP_UBuff2"
	#define buff3 "HX_BDP_UBuff3"
	#define buff4 "HX_BDP_UBuff4"
	#define buff5 "HX_BDP_UBuff5"
	#define buff6 "HX_BDP_UBuff6"
	#define air "HX_BDP_UBuff6"
	#define rage "HX_BDP_UBuff6"
	#define armor "HX_BDP_UArmor"
	#define ammo1 "HX_BDP_UClip1"
	#define ammo2 "HX_BDP_UShell"
	#define ammo3 "HX_BDP_UClip2"
	#define ammo4 "HX_BDP_URocket"
	#define ammo5 "HX_BDP_UCell"
	#define ammo6 "HX_BDP_UGas"
	#define grenade1 "HX_BDP_UGrenade1"
	#define grenade2 "HX_BDP_UGrenade2"
	#define grenade3 "HX_BDP_UGrenade3"
	#define grenade4 "HX_BDP_UGrenade4"
	#define grenadeicon "HX_BDP_UGrenadeR"
	#define weaponslot1 "HX_BDP_UWeaponslot1"
	#define weaponslot2 "HX_BDP_UWeaponslot2"
	#define weaponslot3 "HX_BDP_UWeaponslot3"
	#define weaponslot4 "HX_BDP_UWeaponslot4"
	#define weaponslot5 "HX_BDP_UWeaponslot5"
	#define weaponslot6 "HX_BDP_UWeaponslot6"
	#define weaponslot7 "HX_BDP_UWeaponslot7"
	#define weaponslot8 "HX_BDP_UWeaponslot8"
	#define weaponslot9 "HX_BDP_UWeaponslot9"
	#define weaponslot0 "HX_BDP_UWeaponslot0"

script "HXMOD_BDPUnmaker7ticHandler" enter
{
	// Wait 35 tics (1sec) before engaging, to make sure the token has been given
	delay(35);

	if (CheckInventory(HXS_GetTokenString(HXMOD_BRUTALDOOMPLAT)))
	{
		while (true)
		{
			// START THE CHAOS
			if (CheckInventory(HXS_GetTokenString(BDTRANSFORMUNMAKER)) && !CheckInventory(hx_rushactive))
				{ GiveInventory(hx_rushactive, 1); }

			// RANDOM CHAOS
			else if (CheckInventory(HXS_GetTokenString(BDTRANSFORMUNMAKER)) && CheckInventory(hx_rushactive))
			{
				// Level Timer
				HX_RealityFailing(timer1, max2);
				HX_RealityFailing(timer2, max2);
				HX_RealityFailing(timer3, max2);
				// Level Stats
				if (CheckInventory(hxsys_extendedstats) == 2)
				{
					HX_RealityFailing(kills, max6);
					HX_RealityFailing(items, max6);
					HX_RealityFailing(secrets, max6);
					HX_RealityFailing(totalmonsters, max6);
					HX_RealityFailing(totalitems, max6);
					HX_RealityFailing(totalsecrets, max6);
				}
				else if (CheckInventory(hxsys_extendedstats) == 1)
				{
					HX_RealityFailing(kills, max5);
					HX_RealityFailing(items, max5);
					HX_RealityFailing(secrets, max5);
					HX_RealityFailing(totalmonsters, max5);
					HX_RealityFailing(totalitems, max5);
					HX_RealityFailing(totalsecrets, max5);
				}
				else
				{
					HX_RealityFailing(kills, max4);
					HX_RealityFailing(items, max4);
					HX_RealityFailing(secrets, max4);
					HX_RealityFailing(totalmonsters, max4);
					HX_RealityFailing(totalitems, max4);
					HX_RealityFailing(totalsecrets, max4);
				}
				// Powerups
				HX_RealityFailing(buff1, max3);
				HX_RealityFailing(buff2, max3);
				HX_RealityFailing(buff3, max3);
				HX_RealityFailing(buff4, max3);
				HX_RealityFailing(buff5, max3);
				HX_RealityFailing(buff6, max3);
				// Character Stats Panels
				HX_RealityFailing(air, max2);
				HX_RealityFailing(rage, max3);
				HX_RealityFailing(armor, max4);
				// Ammo Tallies
				HX_RealityFailing(ammo1, max4);
				HX_RealityFailing(ammo2, max4);
				HX_RealityFailing(ammo3, max4);
				HX_RealityFailing(ammo4, max4);
				HX_RealityFailing(ammo5, max4);
				HX_RealityFailing(ammo6, max4);
				// Grenades
				HX_RealityFailing(grenade1, max1);
				HX_RealityFailing(grenade2, max1);
				HX_RealityFailing(grenade3, max1);
				HX_RealityFailing(grenade4, max1);
				HX_RealityFailing(grenadeicon, 3);
				// Weaponslots
				HX_RealityFailing(weaponslot1, max1);
				HX_RealityFailing(weaponslot2, max1);
				HX_RealityFailing(weaponslot3, max1);
				HX_RealityFailing(weaponslot4, max1);
				HX_RealityFailing(weaponslot5, max1);
				HX_RealityFailing(weaponslot6, max1);
				HX_RealityFailing(weaponslot7, max1);
				HX_RealityFailing(weaponslot8, max1);
				HX_RealityFailing(weaponslot9, max1);
				HX_RealityFailing(weaponslot0, max1);
			}

			// CLEANUP
			else if (!CheckInventory(HXS_GetTokenString(BDTRANSFORMUNMAKER)) && CheckInventory(hx_rushactive))
			{
				// Level Timer
				HX_RealityFailing(timer1, 0);
				HX_RealityFailing(timer2, 0);
				HX_RealityFailing(timer3, 0);
				// Level Stats
				HX_RealityFailing(kills, 0);
				HX_RealityFailing(items, 0);
				HX_RealityFailing(secrets, 0);
				HX_RealityFailing(totalmonsters, 0);
				HX_RealityFailing(totalitems, 0);
				HX_RealityFailing(totalsecrets, 0);
				// Powerups
				HX_RealityFailing(buff1, 0);
				HX_RealityFailing(buff2, 0);
				HX_RealityFailing(buff3, 0);
				HX_RealityFailing(buff4, 0);
				HX_RealityFailing(buff5, 0);
				HX_RealityFailing(buff6, 0);
				// Character Stats Panels
				HX_RealityFailing(air, 0);
				HX_RealityFailing(rage, 0);
				HX_RealityFailing(armor, 0);
				// Ammo Tallies
				HX_RealityFailing(ammo1, 0);
				HX_RealityFailing(ammo2, 0);
				HX_RealityFailing(ammo3, 0);
				HX_RealityFailing(ammo4, 0);
				HX_RealityFailing(ammo5, 0);
				HX_RealityFailing(ammo6, 0);
				// Grenades
				HX_RealityFailing(grenade1, 0);
				HX_RealityFailing(grenade2, 0);
				HX_RealityFailing(grenade3, 0);
				HX_RealityFailing(grenade4, 0);
				HX_RealityFailing(grenadeicon, 0);
				// Weaponslots
				HX_RealityFailing(weaponslot1, 0);
				HX_RealityFailing(weaponslot2, 0);
				HX_RealityFailing(weaponslot3, 0);
				HX_RealityFailing(weaponslot4, 0);
				HX_RealityFailing(weaponslot5, 0);
				HX_RealityFailing(weaponslot6, 0);
				HX_RealityFailing(weaponslot7, 0);
				HX_RealityFailing(weaponslot8, 0);
				HX_RealityFailing(weaponslot9, 0);
				HX_RealityFailing(weaponslot0, 0);

				// Finish Cleanup
				TakeInventory(hx_rushactive, 1);
			}

		/* Timer */
			// Wait 5 tics (1/7sec) before repeating, since we want this to be reasonably responsive
			delay(1);
		}
	}
}

function void HX_RealityFailing (str hxitem, int maxnum)
{
	int hxitemcount = CheckInventory(hxitem);
	int randomnumber;

	if (!CheckInventory(HXS_GetTokenString(HXSYS_LOWMOTION)))
	{
		randomnumber = Random (0, maxnum);
	}
	else
	{
		if		(maxnum == max1) { randomnumber = 6; }
		else if	(maxnum == max2) { randomnumber = 66; }
		else if	(maxnum == max3) { randomnumber = 666; }
		else if	(maxnum == max4) { randomnumber = 6666; }
		else if	(maxnum == max5) { randomnumber = 66666; }
		else if	(maxnum == max6) { randomnumber = 666666; }
	}

	HXS_ItemManagement(randomnumber, hxitem, hxitemcount);
}