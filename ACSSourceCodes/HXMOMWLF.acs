#library "HXMOMWLF"
#include "zcommon.acs"
#import "HXATOKEN.acs"
#import "HXAMODCM.acs"
#import "HXASTATS.acs"

str omniwolfblur = "PowerGhost";
str omniwolfhealthtoken = "HX_OmniWolf_HealthOverMaxToken";
str omniwolftreasuretoken = "HX_OmniWolf_TreasurePercent";

script "HXS_OmniWolf35ticHandler" enter
{
	// Wait 35 tics (1sec) before engaging, to make sure the token has been given
	delay(35);

	if (CheckInventory(HXS_GetTokenString(HXMOD_OMNIWOLF))) {
		while (true)
		{
/* 		// Key Management Tokens
			// Blue Keys
			HXS_ItemSync(vanillabluecard, hxgen_bluecard);
			HXS_ItemSync(vanillablueskull, hxgen_blueskull);
			// Red Keys
			HXS_ItemSync(vanillaredcard, hxgen_redcard);
			HXS_ItemSync(vanillaredskull, hxgen_redskull);
			// Yellow Keys
			HXS_ItemSync(vanillayellowcard, hxgen_yellowcard);
			HXS_ItemSync(vanillayellowskull, hxgen_yellowskull); */

		// Powerup Management Tokens
			// Berserk
			/* HXS_ItemSync(HXS_GetTokenString(VANILLABERSERK), HXS_GetTokenString(HXGEN_BERSERK)); */

		// Timer
			// Wait 35 tics (~1sec) before repeating, since we want this to be a clock
			delay(35);
		}
	}
}

script "HXS_OmniWolf7ticHandler" enter
{
	// Wait 35 tics (1sec) before engaging, to make sure the token has been given
	delay(35);
	
	if (CheckInventory(HXS_GetTokenString(HXMOD_OMNIWOLF))) {
		while (true)
		{
		// Health & Treasure System
			HXS_StatSync(GetActorProperty(0, APROP_Health), omniwolfhealthtoken);
			HXS_TreasurePercent();

		// Powerup Management Tokens
			// Infrared
			HXS_PowerupTimer(HXS_GetTokenString(VANILLAINFRARED), HXS_GetTokenString(HXGEN_INFRARED));
			// Invisibility
			HXS_PowerupTimer(omniwolfblur, HXS_GetTokenString(HXGEN_INVISIBILITY));
			// Invulnerability
			HXS_PowerupTimer(HXS_GetTokenString(VANILLAINVULNERABILITY), HXS_GetTokenString(HXGEN_INVULNERABILITY));
			// Radsuit
			HXS_PowerupTimer(HXS_GetTokenString(VANILLARADSUIT), HXS_GetTokenString(HXGEN_RADSUIT));

		// Timer
			// Wait 7 tics (1/5sec) before repeating, since we want this to be reasonably responsive
			delay(7);
		}
	}
}

function void HXS_TreasurePercent (void)
{
	int hxtokencount = CheckInventory(omniwolftreasuretoken);
	int itemsfound = GetLevelInfo(LEVELINFO_FOUND_ITEMS);
	int itemstotal = GetLevelInfo(LEVELINFO_TOTAL_ITEMS);
	int itemspercent = 0;

	if (itemstotal) { itemspercent = Round(FixedDiv(itemsfound, itemstotal) * 100) >> 16; }

	HXS_ItemManagement(itemspercent, omniwolftreasuretoken, hxtokencount);
}