#library "HXMBD"
#include "zcommon.acs"
#import "HXATOKEN.acs"
#import "HXAMODCM.acs"
#import "HXASTATS.acs"

// Brutal Doom General
	#define bdgrenadetype "nadetype"
	#define bdhaste "PowerSpeed2"
	#define bdinfrared "PowerTorch"
	#define bditemmeatammo "MeatAmmo"
	#define bdmeatshieldcguy "CGuyShield"
	#define bdmeatshieldmarine "EvilMarineShield"
	#define bdmeatshieldimp "ImpShield"
	#define bdmeatshieldnazi "NaziShield"
	#define bdmeatshieldsguy "SGuyShield"
	#define bdmeatshieldzciv "ZombieCivilianShield"
	#define bdmeatshieldzguy "ZManShield"
	#define bdquaddamage "Powerquakedamage"
	#define bdradsuit "PowerMask"
	#define bdshield "PowerShield"
	#define bdstamina "UsedStamina"
	#define bdstaminamax 110
	#define bdtransformbaron "PowerTransformBaron"
	#define bdtransformmancubus "PowerTransformMancubus"
	#define bdtransformrevenant "PowerTransformRevenant"
	#define bdvehiclebike "PowerBikeSwitch"
	#define bdvehicleheavymg "PowerHeavyMachinegunSwitch"
	#define bdvehiclehelicopter "PowerattackhelicopterSwitch"
	#define bdvehiclemech "PowerMechSwitch"
	#define bdvehicletank "PowerTankSwitch"
	#define bdvehicletankart "PowerArtilleryTankSwitch"
	#define hxbd_grenadetype "HX_BrutalDoomPlat_grenadetype"
	#define hxbd_meatammo "HX_BrutalDoom_meatammo"
	#define hxbd_meatshield "HX_BrutalDoom_meatshield"
	#define hxbd_tfduration "HX_BrutalDoom_transformationduration"
	#define hxgen_shield "HX_ShieldPowerUpToken"
	#define hxbd_staminatoken "HX_BrutalDoom_staminatoken"

script "HXS_BrutalDoom35ticHandler" enter
{
	// Wait 35 tics (1sec) before engaging, to make sure the token has been given
	delay(35);

	if (CheckInventory(HXS_GetTokenString(HXMOD_BRUTALDOOM)))
	{
		while (true)
		{
/* 	// Key Management Tokens
		// Blue Keys
			HXS_ItemSync(vanillabluecard, hxgen_bluecard);
			HXS_ItemSync(vanillablueskull, hxgen_blueskull);
		// Red Keys
			HXS_ItemSync(vanillaredcard, hxgen_redcard);
			HXS_ItemSync(vanillaredskull, hxgen_redskull);
		// Yellow Keys
			HXS_ItemSync(vanillayellowcard, hxgen_yellowcard);
			HXS_ItemSync(vanillayellowskull, hxgen_yellowskull); */

	// Powerup Management Tokens
		// Berserk
			HXS_ItemSync(HXS_GetTokenString(VANILLABERSERK), HXS_GetTokenString(HXGEN_BERSERK));
		// Shield
			HXS_ItemSync(bdshield, hxgen_shield);

	// Timer
			// Wait 35 tics (~1sec) before repeating, since we want this to be a clock
			delay(35);
		}
	}
}

script "HXS_BrutalDoom7ticHandler" enter
{
	// Wait 35 tics (1sec) before engaging, to make sure the token has been given
	delay(35);

	if (CheckInventory(HXS_GetTokenString(HXMOD_BRUTALDOOM)))
	{
		while (true)
		{

		// Stamina Control
			if (CheckInventory(HXS_GetTokenString(BDITEMTACTICAL))) { HXS_StamFlip(CheckInventory(bdstamina), hxbd_staminatoken, bdstaminamax); }
		// Powerup Management Tokens
			// Haste (BDP)
			if (CheckInventory(HXS_GetTokenString(HXMOD_BRUTALDOOMPLAT))) { HXS_PowerupTimer(bdhaste, HXS_GetTokenString(HXGEN_HASTESHORT)); }
			// Infrared
			HXS_PowerupTimer(bdinfrared, HXS_GetTokenString(HXGEN_INFRARED));
			// Invisibility
			HXS_PowerupTimer(HXS_GetTokenString(VANILLAINVISIBILITY), HXS_GetTokenString(HXGEN_INVISIBILITY));
			// Invulnerability
			HXS_PowerupTimer(HXS_GetTokenString(VANILLAINVULNERABILITY), HXS_GetTokenString(HXGEN_INVULNERABILITY));
			// Quad Damage (BDP)
			if (CheckInventory(HXS_GetTokenString(HXMOD_BRUTALDOOMPLAT))) { HXS_PowerupTimer(bdquaddamage, HXS_GetTokenString(HXGEN_QUADDAMAGE)); }
			// Radsuit
			HXS_PowerupTimer(HXS_GetTokenString(VANILLARADSUIT), HXS_GetTokenString(HXGEN_RADSUIT));
		
		// Grenade Check
			if (CheckInventory(HXS_GetTokenString(HXMOD_BRUTALDOOMPLAT))) { HXS_ItemSync(bdgrenadetype, hxbd_grenadetype); }

		// Meat Shield Check
			if (CheckInventory(bdmeatshieldcguy)
				|| CheckInventory(bdmeatshieldmarine)
				|| CheckInventory(bdmeatshieldimp)
				|| CheckInventory(bdmeatshieldnazi)
				|| CheckInventory(bdmeatshieldsguy)
				|| CheckInventory(bdmeatshieldzciv)
				|| CheckInventory(bdmeatshieldzguy))
			{ GiveInventory(hxbd_meatshield, 1); }
			else
			{ TakeInventory(hxbd_meatshield, 1); }			
			HX_BDMeatFlip(bditemmeatammo, hxbd_meatammo);

		// Vehicle Check
			if (CheckInventory(bdtransformbaron)
				|| CheckInventory(bdtransformmancubus)
				|| CheckInventory(bdtransformrevenant)
				|| CheckInventory(HXS_GetTokenString(BDTRANSFORMUNMAKER))
				|| CheckInventory(bdvehiclebike)
				|| CheckInventory(bdvehicleheavymg)
				|| CheckInventory(bdvehiclehelicopter)
				|| CheckInventory(bdvehiclemech)
				|| CheckInventory(bdvehicletank)
				|| CheckInventory(bdvehicletankart))
			{ GiveInventory(HXS_GetTokenString(HXSYS_VEHICLEHUD), 1); }
			else
			{ TakeInventory(HXS_GetTokenString(HXSYS_VEHICLEHUD), 1); }

		// Transformation Check
			if (CheckInventory(bdtransformbaron)
				|| CheckInventory(bdtransformmancubus)
				|| CheckInventory(bdtransformrevenant)
				|| CheckInventory(HXS_GetTokenString(BDTRANSFORMUNMAKER)))
			{ GiveInventory(HXS_GetTokenString(HXSYS_TRANSFORMHUD), 1); }
			else
			{ TakeInventory(HXS_GetTokenString(HXSYS_TRANSFORMHUD), 1); }

			if (CheckInventory(HXS_GetTokenString(HXSYS_TRANSFORMHUD)))
			{
				if (CheckInventory(bdtransformbaron)) { HXS_PowerupTimer(bdtransformbaron, hxbd_tfduration); }
				if (CheckInventory(bdtransformmancubus)) { HXS_PowerupTimer(bdtransformmancubus, hxbd_tfduration); }
				if (CheckInventory(bdtransformrevenant)) { HXS_PowerupTimer(bdtransformrevenant, hxbd_tfduration); }
			}
			else { TakeInventory(hxbd_tfduration, hxbd_tfduration); }



		// Unmaker HUD Killer
			if (CheckInventory(HXS_GetTokenString(BDTRANSFORMUNMAKER)))	{ GiveInventory(HXS_GetTokenString(HXSYS_NORMALHUDKILLER), 1); }
			else									{ TakeInventory(HXS_GetTokenString(HXSYS_NORMALHUDKILLER), 1); }

		// Timer
			// Wait 7 tics (1/5sec) before repeating, since we want this to be reasonably responsive
			delay(7);
		}
	}
}

function void HX_BDMeatFlip (str meatammo, str hxmeatammo)
{
	int meattoken = CheckInventory(meatammo);
	int hxtoken = CheckInventory(hxmeatammo);
	int bdmaxmeatammo = 100; // BD's max stamina count
	int bdmeatcorrection = bdmaxmeatammo - meattoken; // the HX meat ammo we should have

	if (meattoken)
	{
		if (bdmeatcorrection > hxtoken) { GiveInventory(hxmeatammo, bdmeatcorrection - hxtoken); }
		else if (bdmeatcorrection < hxtoken) { TakeInventory(hxmeatammo, hxtoken - bdmeatcorrection); }
	}
	else if (!meattoken && hxtoken != bdmaxmeatammo) { GiveInventory(hxmeatammo, bdmaxmeatammo - hxtoken); }
}