#library "HXAMODCM"
#include "zcommon.acs"

// Mod Master Tokens
str hxmod_none = "HXMOD_VANILLA";
str hxmod_resettoken = "HXMOD_IDontExist";
str hxmod_modfound = "HXMOD_MODFOUND";
str hxmod_64art = "HXMOD_Doom64Art";
str hxmod_bdlite = "HXMOD_BDLite";
str hxmod_beautifuldoom = "HXMOD_BeautifulDoom";
str hxmod_brutaldoom = "HXMOD_BrutalDoom";
str hxmod_brutaldoom64 = "HXMOD_BrutalDoom64";
str hxmod_brutaldoomce = "HXMOD_BrutalDoomBWCE";
str hxmod_brutaldoomplat = "HXMOD_BrutalDoomPlatinum";
str hxmod_CED64 = "HXMOD_DoomCE_D64";
str hxmod_CEPSX = "HXMOD_DoomCE_PSX";
str hxmod_D4V = "HXMOD_Doom4Vanilla";
str hxmod_faspons = "HXMOD_Faspons";
str hxmod_kriegsland1 = "HXMOD_Kriegsland1";
str hxmod_kriegsland2 = "HXMOD_Kriegsland2";
str hxmod_ledgwmtoken = "HXMOD_LedsGenericWeaponMod";
str hxmod_lttyphon = "HXMOD_BadAssBitch";
str hxmod_nazisv2 = "HXMOD_NazisV2";
str hxmod_omniwolf = "HXMOD_OmniWolf";
str hxmod_perksmoothenh = "HXMOD_PerkSmootherWeaponsEnh";
str hxmod_smoothdoom = "HXMOD_SmoothDoom2";
str hxmod_supercharge = "HXMOD_Supercharge";
str hxmod_ziobrutalwolf = "HXMOD_ZioBrutalWolfenstein";

// HUD Mode Switch
str hxsys_normalhudkiller = "HXSYS_NormalHUDKillerToken";
str hxsys_transformhud = "HXSYS_TransformationHUDToken";
str hxsys_vehiclehud = "HXSYS_VehicleHUDToken";

// Functionality Overrides
str hxmod_weapondualwielduniqueammo = "HXMOD_WeaponDualWieldUniqueAmmo";
str hxmod_weapononlyammo1 = "HXMOD_WeaponOnlyAmmo1";

// General Items
str vanillaberserk = "PowerStrength";
str hxgen_berserk = "HX_BerserkPowerUpToken";
str vanillainfrared = "PowerLightamp";
str hxgen_infrared = "HX_InfraredPowerUpToken";
str vanillainvisibility = "PowerInvisibility";
str hxgen_invisibility = "HX_InvisibilityPowerUpToken";
str vanillainvulnerability = "PowerInvulnerable";
str hxgen_invulnerability = "HX_InvulnerabilityPowerUpToken";
str vanillaradsuit = "PowerIronfeet";
str hxgen_radsuit = "HX_RadSuitPowerUpToken";
/* str vanillabluecard = "BlueCard";
str hxgen_bluecard = "HX_BlueCardKeyToken";
str vanillablueskull = "BlueSkull";
str hxgen_blueskull = "HX_BlueSkullKeyToken";
str vanillaredcard = "RedCard";
str hxgen_redcard = "HX_RedCardKeyToken";
str vanillaredskull = "RedSkull";
str hxgen_redskull = "HX_RedSkullKeyToken";
str vanillayellowcard = "YellowCard";
str hxgen_yellowcard = "HX_YellowCardKeyToken";
str vanillayellowskull = "YellowSkull";
str hxgen_yellowskull = "HX_YellowSkullKeyToken"; */

// Beautiful Doom
str beautifulbloodcontrol = "BD_BloodyPrintControl";
str beautifuloverlaycontrol = "BD_OverlayControl";
str beautifulweaponcontrol = "BD_WeaponPickupControl";

// BDLite
str bdliteclass = "Doomer";
str bdlitefist = "BdMeleeAttacks";
str bdliterifle = "BdRifle";

// Brutal Doom General
str bdgenplayer = "IsPlayer";
str bditemnottactical = "IsNOTTacticalClass";
str bditempurist = "IsPlayingAsPurist";
str bditemtactical = "IsTacticalClass";
/* str bdclassarcadedoomer = "Arcade Rifle (No Reload)";
str bdclassarcadedoomer2 = "Arcade Pistol (No Reload)";
str bdclassarcadedoomer3 = "Arcade Shotgun (No Reload)";
str bdclassbdoomer = "BDoomer";
str bdclassdoomer2 = "Doomer2";
str bdclassdoomer3 = "Shotgun Start"; */

// Brutal Doom Platinum
str bdplattotallyamenudummy = "IsNOTAMenuDummy";

// Brutal Doom 64
str bd64classbasic = "64DoomPlayer";
str bd64classmodern = "Modern";
str bd64classtactical = "Tactical64DoomPlayer";
str bd64classtacticalpistol = "Tactical64DoomPlayer_P";
str bd64fist = "64Fist";
str bd64pistol = "64Pistol";
str bd64pistoltactical = "64PistolTactical";
str bd64rifletactical = "64RifleTactical";

// Brutal Wolfenstein (ZioMcCall)
str bwzioclass = "Doomer2";
str bwziofist = "Melee_Attacks";
str bwziopistolammo = "LUGERAmmoAlt";

// Doom 4 Vanilla
str d4vclass = "DoomSlayer";
str d4vfist = "DH_Fist";
str d4vpistol = "DH_Pistol2";

// Doom CE - D64 and PSX
str doomced64class = "D64DoomPlayer";
str doomced64fist = "D64Fist";
str doomced64pistol = "D64Pistol";
str doomcepsxclass = "PsxDoomPlayer";
str doomcepsxfist = "PsxFist";
str doomcepsxpistol = "PsxPistol";

// Faspons
str fasponsclass = "FasPlayer";
str fasponsfist = "Knuckles";
str fasponsrifle = "CombatRifle";

// Kriegsland 1: Blutorden
str kriegsland1class = "FKPlayer";
str kriegsland1grenades = "HDGrenades";
str kriegsland1melee = "HDKnife";

// Kriegsland 2: Untergrund
str kriegsland2class = "K2Player";
str kriegsland2melee = "K2WeaponB";
str kriegsland2pistol = "K2WeaponC";

// Led's Generic Weapon Mod
str ledclass = "DoomGuy";
str ledfist = "Knuckle";
str ledminigunmag = "MinigunMag";

// Lt. Typhon
str typhonclass = "VeteranDoomPlayer";
str typhonbio = "VeteranBioAttack";
str typhondumbbell = "VeteranDumbbell";

// NAZIS V2
str nazisv2class = "WWNazisPlayer";
str nazisv2grenade = "GrenadePickup";
str nazisv2revolvermag = "WeaselsRevolverLoaded";

// NAZIS V2
str omniwolfammo = "WolfBullets";
str omniwolfclass = "BJBlazko";
str omniwolfpistol = "WolfPistol";

// PerK's Smoother Weapon Animations Enhanced
str perkzfist = "ZPerkFist";
str perkzpistol = "ZPerkPistol";

// SmoothDoom 2.0 WIP
str smoothdoomclass = "PerkDPlayer";
str smoothdoomfist = "PerkFist";
str smoothdoompistol = "PerkPistol";

// Supercharge 2.8
str superchargefist = "TangoFist";
str superchargepistol = "TangoPistol";
str superchargerifleammo = "AssaultRifleAmmo";

script "HXS_ModCompatibilityStartup" enter
{
// Mod Master Tokens
	// Beautiful Doom 7.1.6
		if (CheckInventory(beautifulbloodcontrol)
			&& CheckInventory(beautifuloverlaycontrol)
			&& CheckInventory(beautifulweaponcontrol)
			&& !CheckInventory(hxmod_beautifuldoom))
		{
			GiveInventory(hxmod_modfound, 1);
			GiveInventory(hxmod_beautifuldoom, 1);
			if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
		}	
	// BDLite
		else if (CheckActorClass(0, bdliteclass)
			&& CheckInventory(bdlitefist)
			&& CheckInventory(bdliterifle)
			&& !CheckInventory(hxmod_bdlite))
		{
			GiveInventory(hxmod_modfound, 1);
			GiveInventory(hxmod_bdlite, 1);
			if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
		}	
	// Brutal Doom 64
		else if (CheckInventory(bd64fist)
			&& !CheckInventory(hxmod_brutaldoom64))
		{
			if ((CheckInventory(bd64Pistol)
				|| CheckInventory(bd64pistoltactical)
				|| CheckInventory(bd64rifletactical))
			&& (CheckActorClass(0, bd64classbasic)
				|| CheckActorClass(0, bd64classtactical)
				|| CheckActorClass(0, bd64classtacticalpistol)
				|| CheckActorClass(0, bd64classmodern)))			
			{
				GiveInventory(hxmod_modfound, 1);
				GiveInventory(hxmod_brutaldoom64, 1);
				GiveInventory(hxmod_64art, 1);
				if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
			}
		}
	// Brutal Doom General
		else if (CheckInventory(bdgenplayer)
			&& !CheckInventory(hxmod_brutaldoom))
		{
			// Brutal Doom Platinum
			if (CheckInventory(bdplattotallyamenudummy))
			{
				GiveInventory(hxmod_modfound, 1);
				GiveInventory(hxmod_brutaldoom, 1);
				GiveInventory(hxmod_brutaldoomplat, 1);
				if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
			}
			// Brutal Wolfenstein (ZioMcCall)
			else if (CheckActorClass(0, bwzioclass)
					&& CheckInventory(bwziofist)
					&& CheckInventory(bwziopistolammo)
					&& !CheckInventory(hxmod_ziobrutalwolf))
			{
				GiveInventory(hxmod_modfound, 1);
				GiveInventory(hxmod_brutaldoom, 1);
				GiveInventory(hxmod_ziobrutalwolf, 1);
				if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
			}
			// Brutal Doom v21 / CE
			else if (CheckInventory(bditemnottactical)
					|| CheckInventory(bditemtactical)
					|| CheckInventory(bditempurist))
			{
				GiveInventory(hxmod_modfound, 1);
				GiveInventory(hxmod_brutaldoom, 1);
				if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
			}
		}
	// Doom 4 Vanilla
		else if (CheckActorClass(0, d4vclass)
			&& CheckInventory(d4vfist)
			&& CheckInventory(d4vpistol)
			&& !CheckInventory(hxmod_D4V))
		{
			GiveInventory(hxmod_modfound, 1);
			GiveInventory(hxmod_D4V, 1);
			if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
		}
	// Doom CE - D64
		else if (CheckActorClass(0, doomced64class)
			&& CheckInventory(doomced64fist)
			&& CheckInventory(doomced64pistol)
			&& !CheckInventory(hxmod_CED64))
		{
			GiveInventory(hxmod_modfound, 1);
			GiveInventory(hxmod_CED64, 1);
			GiveInventory(hxmod_64art, 1);
			if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
		}
	// Doom CE - PSX
		else if (CheckActorClass(0, doomcepsxclass)
			&& CheckInventory(doomcepsxfist)
			&& CheckInventory(doomcepsxpistol)
			&& !CheckInventory(hxmod_CEPSX))
		{
			GiveInventory(hxmod_modfound, 1);
			GiveInventory(hxmod_CEPSX, 1);
			if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
		}
	// Faspons
		else if (CheckActorClass(0, fasponsclass)
			&& CheckInventory(fasponsfist)
			&& CheckInventory(fasponsrifle)
			&& !CheckInventory(hxmod_faspons))
		{
			GiveInventory(hxmod_modfound, 1);
			GiveInventory(hxmod_faspons, 1);
			if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
		}
	// Kriegsland 1: Blutorden
		else if (CheckActorClass(0, kriegsland1class)
			&& CheckInventory(kriegsland1grenades)
			&& CheckInventory(kriegsland1melee)
			&& !CheckInventory(hxmod_kriegsland1))
		{
			GiveInventory(hxmod_modfound, 1);
			GiveInventory(hxmod_kriegsland1, 1);
			if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
		}
	// Kriegsland 2: Untergrund
		else if (CheckActorClass(0, kriegsland2class)
			&& CheckInventory(kriegsland2melee)
			&& CheckInventory(kriegsland2pistol)
			&& !CheckInventory(hxmod_kriegsland2))
		{
			GiveInventory(hxmod_modfound, 1);
			GiveInventory(hxmod_kriegsland2, 1);
			if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
		}
	// Led's Generic Weapon Mod
		else if (CheckActorClass(0, ledclass)
			&& CheckInventory(ledfist)
			&& CheckInventory(ledminigunmag)
			&& !CheckInventory(hxmod_ledgwmtoken))
		{
			GiveInventory(hxmod_modfound, 1);
			GiveInventory(hxmod_ledgwmtoken, 1);
			if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
		}
	// Lt. Typhon
		else if (CheckActorClass(0, typhonclass)
			&& CheckInventory(typhonbio)
			&& CheckInventory(typhondumbbell)
			&& !CheckInventory(hxmod_lttyphon))
		{
			GiveInventory(hxmod_modfound, 1);
			GiveInventory(hxmod_lttyphon, 1);
			if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
		}
	// NAZIS V2
		else if (CheckActorClass(0, nazisv2class)
			&& CheckInventory(nazisv2grenade)
			&& CheckInventory(nazisv2revolvermag)
			&& !CheckInventory(hxmod_nazisv2))
		{
			GiveInventory(hxmod_modfound, 1);
			GiveInventory(hxmod_nazisv2, 1);
			if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
		}
	// Omni-Wolf
		else if (CheckActorClass(0, omniwolfclass)
			&& CheckInventory(omniwolfammo)
			&& CheckInventory(omniwolfpistol)
			&& !CheckInventory(hxmod_omniwolf))
		{
			GiveInventory(hxmod_modfound, 1);
			GiveInventory(hxmod_omniwolf, 1);
			if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
		}
	// PerK's Smoother Weapon Animations Enhanced
		else if (CheckInventory(perkzfist)
			&& CheckInventory(perkzpistol)
			&& !CheckInventory(hxmod_perksmoothenh))
		{
			GiveInventory(hxmod_modfound, 1);
			GiveInventory(hxmod_perksmoothenh, 1);
			if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
		}
	// SmoothDoom 2.0 WIP
		else if (CheckActorClass(0, smoothdoomclass)
			&& CheckInventory(smoothdoomfist)
			&& CheckInventory(smoothdoompistol)
			&& !CheckInventory(hxmod_smoothdoom))
		{
			GiveInventory(hxmod_modfound, 1);
			GiveInventory(hxmod_smoothdoom, 1);
			if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
		}
	// Supercharge 2.8
		else if (CheckInventory(superchargefist)
			&& CheckInventory(superchargepistol)
			&& CheckInventory(superchargerifleammo)
			&& !CheckInventory(hxmod_supercharge))
		{
			GiveInventory(hxmod_modfound, 1);
			GiveInventory(hxmod_supercharge, 1);
			if (CheckInventory(hxmod_none)) { TakeInventory(hxmod_none, 1); }
		}
	// No mod detected
		else if (!CheckInventory(hxmod_modfound)) { GiveInventory(hxmod_none, 1); }
}

function void HXS_ItemManagement (int moditemcount, str hxitem, int hxitemtokens)
{
	if (moditemcount > 0 && moditemcount != hxitemtokens)
	{
		if (moditemcount > hxitemtokens) { GiveInventory(hxitem, moditemcount - hxitemtokens); }
		else if (moditemcount < hxitemtokens) { TakeInventory(hxitem, hxitemtokens - moditemcount); }
	}
	else if (moditemcount <= 0 && hxitemtokens) { TakeInventory(hxitem, hxitemtokens); }
}

function void HXS_ItemSync (str moditem, str hxitem)
{
	int moditemcount = CheckInventory(moditem);
	int hxitemcount = CheckInventory(hxitem);

	HXS_ItemManagement(moditemcount, hxitem, hxitemcount);
}

function void HXS_PowerupTimer (str moditem, str hxitem)
{
	int moditemduration = GetActorPowerupTics(0, moditem) / 35;
	int hxitemcount = CheckInventory(hxitem);

	HXS_ItemManagement(moditemduration, hxitem, hxitemcount);
}