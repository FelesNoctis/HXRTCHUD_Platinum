#library "HXASTATS"
#include "zcommon.acs"
#import "HXAMODCM.acs"

str healthtoken = "HXSYS_HealthOverMaxToken";
str armortoken = "HXSYS_ArmorOverMaxToken";
str staminatoken = "HXSYS_StaminaToken";
str staminastickytoken = "HXSYS_StaminaStickyToken";
str altitudetoken = "HXSYS_AltitudeMetersToken";

script "HXS_PlayerStats7ticHandler" enter
{	
	while (true)
	{

		HXS_StatSync(GetActorProperty(0, APROP_Health), healthtoken);
		HXS_StatSync(CheckInventory("BasicArmor"), armortoken);
		HXS_PlayerAltitude();

		// Wait 7 tics (1/5sec) before repeating, since we want this to be reasonably responsive
		delay(7);
	}
}

function void HXS_PlayerAltitude (void)
{
	int hxaltitude = ((GetActorZ (0) - GetActorFloorZ (0)) >> 16) / 42;
	int tokencount = CheckInventory(altitudetoken);

	HXS_ItemManagement(hxaltitude, altitudetoken, tokencount);
}

function void HXS_StamFlip (int usedstamina, str token, int maxstamina)
{
	int tokencorrection = maxstamina - usedstamina; // the HX stamina tokens we should have
	int tokencount = CheckInventory(token); // the HX stamina tokens we do have
	int stickytoken = CheckInventory(staminastickytoken);
	int stickytime = 15; // 15 x 7 = 105 tics, or 3 seconds

	if (usedstamina)
	{
		if (!stickytoken) { GiveInventory(staminastickytoken, stickytime); }
		if (tokencorrection > tokencount) { GiveInventory(token, tokencorrection - tokencount); }
		else if (tokencorrection < tokencount) { TakeInventory(token, tokencount - tokencorrection); }
	}
	else if (!usedstamina && tokencount != maxstamina) { GiveInventory(token, maxstamina); }
	else if (!usedstamina && tokencount == maxstamina && staminastickytoken) { TakeInventory(staminastickytoken, 1); }
}

function void HXS_StamNormal (str token, int maxstamina)
{
	int tokencount = CheckInventory(token);
	int stickytoken = CheckInventory(staminastickytoken);
	int stickytime = 15; // 15 x 7 = 105 tics, or 3 seconds

	if (tokencount && tokencount != maxstamina) { GiveInventory(staminastickytoken, stickytime); }
	else if (stickytoken && (tokencount == maxstamina || !tokencount)) { TakeInventory(staminastickytoken, 1); }
}

function void HXS_StatSync (int stat, str token)
{
	int normalmax = 100;
	int overstat = stat - normalmax;
	int tokencount = CheckInventory(token);

	HXS_ItemManagement(overstat, token, tokencount);
}