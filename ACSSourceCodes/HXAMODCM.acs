#library "HXAMODCM"
#include "zcommon.acs"
#import "HXATOKEN.acs"

// General Keys (Unused)
/* 	#define vanillabluecard "BlueCard"
	#define hxgen_bluecard "HX_BlueCardKeyToken"
	#define vanillablueskull "BlueSkull"
	#define hxgen_blueskull "HX_BlueSkullKeyToken"
	#define vanillaredcard "RedCard"
	#define hxgen_redcard "HX_RedCardKeyToken"
	#define vanillaredskull "RedSkull"
	#define hxgen_redskull "HX_RedSkullKeyToken"
	#define vanillayellowcard "YellowCard"
	#define hxgen_yellowcard "HX_YellowCardKeyToken"
	#define vanillayellowskull "YellowSkull"
	#define hxgen_yellowskull "HX_YellowSkullKeyToken" */

// Doom 4 Vanilla
	#define d4vclass "DoomSlayer"
	#define d4vfist "DH_Fist"
	#define d4vpistol "DH_Pistol2"

// Doom 64 Retribution
	#define d64rtrclass "64DoomPlayer"
	#define d64rtrfist "64Fist"
	#define d64rtrplaying "IsPlaying"

// Doom CE - D64 and PSX
	#define doomced64class "D64DoomPlayer"
	#define doomced64fist "D64Fist"
	#define doomced64pistol "D64Pistol"
	#define doomcepsxclass "PsxDoomPlayer"
	#define doomcepsxfist "PsxFist"
	#define doomcepsxpistol "PsxPistol"

// Faspons
	#define fasponsclass "FasPlayer"
	#define fasponsfist "Knuckles"
	#define fasponsrifle "CombatRifle"

// Kriegsland 1: Blutorden
	#define kriegsland1class "FKPlayer"
	#define kriegsland1grenades "HDGrenades"
	#define kriegsland1melee "HDKnife"

// Kriegsland 2: Untergrund
	#define kriegsland2class "K2Player"
	#define kriegsland2melee "K2WeaponB"
	#define kriegsland2pistol "K2WeaponC"

// Led's Generic Weapon Mod
	#define ledclass "DoomGuy"
	#define ledfist "Knuckle"
	#define ledminigunmag "MinigunMag"

// Lt. Typhon
	#define typhonclass "VeteranDoomPlayer"
	#define typhonbio "VeteranBioAttack"
	#define typhondumbbell "VeteranDumbbell"

// Meatgrinder
	#define meatgrinderfist "GrinderFist"
	#define meatgrindergrenade "GrenadeAmmo"

// NAZIS V2
	#define nazisv2class "WWNazisPlayer"
	#define nazisv2grenade "GrenadePickup"
	#define nazisv2revolvermag "WeaselsRevolverLoaded"

// NAZIS V2
	#define omniwolfammo "WolfBullets"
	#define omniwolfclass "BJBlazko"
	#define omniwolfpistol "WolfPistol"

// PerK's Smoother Weapon Animations Enhanced
	#define perkzfist "ZPerkFist"
	#define perkzpistol "ZPerkPistol"

// SmoothDoom 2.0 WIP
	#define smoothdoomclass "PerkDPlayer"
	#define smoothdoomfist "PerkFist"
	#define smoothdoompistol "PerkPistol"

// Supercharge 2.8
	#define superchargefist "TangoFist"
	#define superchargepistol "TangoPistol"
	#define superchargerifleammo "AssaultRifleAmmo"

script "HXS_ModCompatibilityStartup" enter
{
	// Hud Killer for mod check debugging
/* 	if (!CheckInventory(HXS_GetTokenString(HXMOD_MODFOUND)))
	{
		GiveInventory(HXS_GetTokenString(HXSYS_NORMALHUDKILLER), 1);
	} */

	// Ac!d's Eriguns
		if (CheckActorClass(0, HXS_GetTokenString(ACIDCLASS))
			&& CheckInventory(HXS_GetTokenString(ACIDFIST))
			&& CheckInventory(HXS_GetTokenString(ACIDPISTOL))
			&& !CheckInventory(HXS_GetTokenString(HXMOD_ACIDERIGUNS)))
		{
			GiveInventory(HXS_GetTokenString(HXMOD_MODFOUND), 1);
			GiveInventory(HXS_GetTokenString(HXMOD_ACIDERIGUNS), 1);
			if (CheckInventory(HXS_GetTokenString(HXMOD_NONE))) { TakeInventory(HXS_GetTokenString(HXMOD_NONE), 1); }
		}	
	// Beautiful Doom 7.1.6
		else if (CheckInventory(HXS_GetTokenString(BEAUTIFULBLOODCONTROL))
			&& CheckInventory(HXS_GetTokenString(BEAUTIFULOVERLAYCONTROL))
			&& CheckInventory(HXS_GetTokenString(BEAUTIFULWEAPONCONTROL))
			&& !CheckInventory(HXS_GetTokenString(HXMOD_BEAUTIFULDOOM)))
		{
			GiveInventory(HXS_GetTokenString(HXMOD_MODFOUND), 1);
			GiveInventory(HXS_GetTokenString(HXMOD_BEAUTIFULDOOM), 1);
			if (CheckInventory(HXS_GetTokenString(HXMOD_NONE))) { TakeInventory(HXS_GetTokenString(HXMOD_NONE), 1); }
		}	
	// BDLite
		else if (CheckActorClass(0, HXS_GetTokenString(BDLITECLASS))
			&& CheckInventory(HXS_GetTokenString(BDLITEFIST))
			&& CheckInventory(HXS_GetTokenString(BDLITERIFLE))
			&& !CheckInventory(HXS_GetTokenString(HXMOD_BDLITE)))
		{
			GiveInventory(HXS_GetTokenString(HXMOD_MODFOUND), 1);
			GiveInventory(HXS_GetTokenString(HXMOD_BDLITE), 1);
			if (CheckInventory(HXS_GetTokenString(HXMOD_NONE))) { TakeInventory(HXS_GetTokenString(HXMOD_NONE), 1); }
		}	
	// Brutal Doom 64 && Doom 64: Retribution (due to shared startup actor names)
		else if ((CheckInventory(HXS_GetTokenString(BD64FIST))
				|| CheckInventory(HXS_GetTokenString(BD64FISTTACTICAL)))
			&& (!CheckInventory(HXS_GetTokenString(HXMOD_BRUTALDOOM64))
				|| !CheckInventory(HXS_GetTokenString(HXMOD_D64RTR))))
		{
			/* log(s:"Running BD64/D64RTR Check"); */
			// Brutal Doom 64
			if (!CheckInventory(d64rtrplaying)
			&& (CheckActorClass(0, HXS_GetTokenString(BD64CLASSBASIC))
				|| CheckActorClass(0, HXS_GetTokenString(BD64CLASSTACTICAL))
				|| CheckActorClass(0, HXS_GetTokenString(BD64CLASSTACTICALPISTOL))
				|| CheckActorClass(0, HXS_GetTokenString(BD64CLASSMODERN)))
			&& (CheckInventory(HXS_GetTokenString(BD64PISTOL))
				|| CheckInventory(HXS_GetTokenString(BD64PISTOLTACTICAL))
				|| CheckInventory(HXS_GetTokenString(BD64RIFLETACTICAL))))
			{
				GiveInventory(HXS_GetTokenString(HXMOD_MODFOUND), 1);
				GiveInventory(HXS_GetTokenString(HXMOD_BRUTALDOOM64), 1);
				GiveInventory(HXS_GetTokenString(HXMOD_64ART), 1);
				if (CheckInventory(HXS_GetTokenString(HXMOD_NONE))) { TakeInventory(HXS_GetTokenString(HXMOD_NONE), 1); }
				/* log(s:"BD64 Caught"); */
			}

			// Doom 64: Retribution
			if (!CheckInventory(HXS_GetTokenString(HXMOD_D64RTR))
			&& CheckInventory(d64rtrplaying)
			&& CheckActorClass(0, d64rtrclass)
			&& CheckInventory(d64rtrfist))
			{
				GiveInventory(HXS_GetTokenString(HXMOD_MODFOUND), 1);
				GiveInventory(HXS_GetTokenString(HXMOD_D64RTR), 1);
				GiveInventory(HXS_GetTokenString(HXMOD_64ART), 1);
				/* log(s:"D64:RTR Caught"); */
				if (CheckInventory(HXS_GetTokenString(HXMOD_BRUTALDOOM64))) { TakeInventory(HXS_GetTokenString(HXMOD_BRUTALDOOM64), 1); /* log(s:"Removing BD64 token"); */ }
				if (CheckInventory(HXS_GetTokenString(HXMOD_NONE))) { TakeInventory(HXS_GetTokenString(HXMOD_NONE), 1); }
			}
		}
	// Brutal Doom General
		else if (CheckInventory(HXS_GetTokenString(BDGENPLAYER))
			&& !CheckInventory(HXS_GetTokenString(HXMOD_BRUTALDOOM)))
		{
			// Brutal Doom Platinum
			if (CheckInventory(HXS_GetTokenString(BDPLATTOTALLYAMENUDUMMY)))
			{
				GiveInventory(HXS_GetTokenString(HXMOD_MODFOUND), 1);
				GiveInventory(HXS_GetTokenString(HXMOD_BRUTALDOOM), 1);
				GiveInventory(HXS_GetTokenString(HXMOD_BRUTALDOOMPLAT), 1);
				if (CheckInventory(HXS_GetTokenString(HXMOD_NONE))) { TakeInventory(HXS_GetTokenString(HXMOD_NONE), 1); }
			}
			// Brutal Wolfenstein (ZioMcCall)
			else if (CheckActorClass(0, HXS_GetTokenString(BWZIOCLASS))
					&& CheckInventory(HXS_GetTokenString(BWZIOFIST))
					&& CheckInventory(HXS_GetTokenString(BWZIOPISTOLAMMO))
					&& !CheckInventory(HXS_GetTokenString(HXMOD_ZIOBRUTALWOLF)))
			{
				GiveInventory(HXS_GetTokenString(HXMOD_MODFOUND), 1);
				GiveInventory(HXS_GetTokenString(HXMOD_BRUTALDOOM), 1);
				GiveInventory(HXS_GetTokenString(HXMOD_ZIOBRUTALWOLF), 1);
				if (CheckInventory(HXS_GetTokenString(HXMOD_NONE))) { TakeInventory(HXS_GetTokenString(HXMOD_NONE), 1); }
			}
			// Brutal Doom v21 / CE
			else if (CheckInventory(HXS_GetTokenString(BDITEMNOTTACTICAL))
					|| CheckInventory(HXS_GetTokenString(BDITEMTACTICAL))
					|| CheckInventory(HXS_GetTokenString(BDITEMPURIST)))
			{
				GiveInventory(HXS_GetTokenString(HXMOD_MODFOUND), 1);
				GiveInventory(HXS_GetTokenString(HXMOD_BRUTALDOOM), 1);
				if (CheckInventory(HXS_GetTokenString(HXMOD_NONE))) { TakeInventory(HXS_GetTokenString(HXMOD_NONE), 1); }
			}
			// None of the above
			else if (!CheckInventory(HXS_GetTokenString(HXMOD_NONE))
				&&	!CheckInventory(HXS_GetTokenString(HXMOD_MODFOUND)))
			{ GiveInventory(HXS_GetTokenString(HXMOD_NONE), 1); }
		}
	// Doom 4 Vanilla
		else if (CheckActorClass(0, d4vclass)
			&& CheckInventory(d4vfist)
			&& CheckInventory(d4vpistol)
			&& !CheckInventory(HXS_GetTokenString(HXMOD_D4V)))
		{
			GiveInventory(HXS_GetTokenString(HXMOD_MODFOUND), 1);
			GiveInventory(HXS_GetTokenString(HXMOD_D4V), 1);
			if (CheckInventory(HXS_GetTokenString(HXMOD_NONE))) { TakeInventory(HXS_GetTokenString(HXMOD_NONE), 1); }
		}
	// Doom CE - D64
		else if (CheckActorClass(0, doomced64class)
			&& CheckInventory(doomced64fist)
			&& CheckInventory(doomced64pistol)
			&& !CheckInventory(HXS_GetTokenString(HXMOD_CED64)))
		{
			GiveInventory(HXS_GetTokenString(HXMOD_MODFOUND), 1);
			GiveInventory(HXS_GetTokenString(HXMOD_CED64), 1);
			GiveInventory(HXS_GetTokenString(HXMOD_64ART), 1);
			if (CheckInventory(HXS_GetTokenString(HXMOD_NONE))) { TakeInventory(HXS_GetTokenString(HXMOD_NONE), 1); }
		}
	// Doom CE - PSX
		else if (CheckActorClass(0, doomcepsxclass)
			&& CheckInventory(doomcepsxfist)
			&& CheckInventory(doomcepsxpistol)
			&& !CheckInventory(HXS_GetTokenString(HXMOD_CEPSX)))
		{
			GiveInventory(HXS_GetTokenString(HXMOD_MODFOUND), 1);
			GiveInventory(HXS_GetTokenString(HXMOD_CEPSX), 1);
			if (CheckInventory(HXS_GetTokenString(HXMOD_NONE))) { TakeInventory(HXS_GetTokenString(HXMOD_NONE), 1); }
		}
	// Faspons
		else if (CheckActorClass(0, fasponsclass)
			&& CheckInventory(fasponsfist)
			&& CheckInventory(fasponsrifle)
			&& !CheckInventory(HXS_GetTokenString(HXMOD_FASPONS)))
		{
			GiveInventory(HXS_GetTokenString(HXMOD_MODFOUND), 1);
			GiveInventory(HXS_GetTokenString(HXMOD_FASPONS), 1);
			if (CheckInventory(HXS_GetTokenString(HXMOD_NONE))) { TakeInventory(HXS_GetTokenString(HXMOD_NONE), 1); }
		}
	// Kriegsland 1: Blutorden
		else if (CheckActorClass(0, kriegsland1class)
			&& CheckInventory(kriegsland1grenades)
			&& CheckInventory(kriegsland1melee)
			&& !CheckInventory(HXS_GetTokenString(HXMOD_KRIEGSLAND1)))
		{
			GiveInventory(HXS_GetTokenString(HXMOD_MODFOUND), 1);
			GiveInventory(HXS_GetTokenString(HXMOD_KRIEGSLAND1), 1);
			if (CheckInventory(HXS_GetTokenString(HXMOD_NONE))) { TakeInventory(HXS_GetTokenString(HXMOD_NONE), 1); }
		}
	// Kriegsland 2: Untergrund
		else if (CheckActorClass(0, kriegsland2class)
			&& CheckInventory(kriegsland2melee)
			&& CheckInventory(kriegsland2pistol)
			&& !CheckInventory(HXS_GetTokenString(HXMOD_KRIEGSLAND2)))
		{
			GiveInventory(HXS_GetTokenString(HXMOD_MODFOUND), 1);
			GiveInventory(HXS_GetTokenString(HXMOD_KRIEGSLAND2), 1);
			if (CheckInventory(HXS_GetTokenString(HXMOD_NONE))) { TakeInventory(HXS_GetTokenString(HXMOD_NONE), 1); }
		}
	// Led's Generic Weapon Mod
		else if (CheckActorClass(0, ledclass)
			&& CheckInventory(ledfist)
			&& CheckInventory(ledminigunmag)
			&& !CheckInventory(HXS_GetTokenString(HXMOD_LEDGWMTOKEN)))
		{
			GiveInventory(HXS_GetTokenString(HXMOD_MODFOUND), 1);
			GiveInventory(HXS_GetTokenString(HXMOD_LEDGWMTOKEN), 1);
			if (CheckInventory(HXS_GetTokenString(HXMOD_NONE))) { TakeInventory(HXS_GetTokenString(HXMOD_NONE), 1); }
		}
	// Lt. Typhon
		else if (CheckActorClass(0, typhonclass)
			&& CheckInventory(typhonbio)
			&& CheckInventory(typhondumbbell)
			&& !CheckInventory(HXS_GetTokenString(HXMOD_LTTYPHON)))
		{
			GiveInventory(HXS_GetTokenString(HXMOD_MODFOUND), 1);
			GiveInventory(HXS_GetTokenString(HXMOD_LTTYPHON), 1);
			if (CheckInventory(HXS_GetTokenString(HXMOD_NONE))) { TakeInventory(HXS_GetTokenString(HXMOD_NONE), 1); }
		}
	// Meatgrinder
		else if (CheckInventory(meatgrinderfist)
			&& !CheckInventory(HXS_GetTokenString(HXMOD_MEATGRINDER)))
		{
			GiveInventory(HXS_GetTokenString(HXMOD_MODFOUND), 1);
			GiveInventory(HXS_GetTokenString(HXMOD_MEATGRINDER), 1);
			if (CheckInventory(meatgrindergrenade)) { GiveInventory(HXS_GetTokenString(HXMOD_MEATGRINDERMRE), 1); }
			if (CheckInventory(HXS_GetTokenString(HXMOD_NONE))) { TakeInventory(HXS_GetTokenString(HXMOD_NONE), 1); }
		}
	// NAZIS V2
		else if (CheckActorClass(0, nazisv2class)
			&& CheckInventory(nazisv2grenade)
			&& CheckInventory(nazisv2revolvermag)
			&& !CheckInventory(HXS_GetTokenString(HXMOD_NAZISV2)))
		{
			GiveInventory(HXS_GetTokenString(HXMOD_MODFOUND), 1);
			GiveInventory(HXS_GetTokenString(HXMOD_NAZISV2), 1);
			if (CheckInventory(HXS_GetTokenString(HXMOD_NONE))) { TakeInventory(HXS_GetTokenString(HXMOD_NONE), 1); }
		}
	// Omni-Wolf
		else if (CheckActorClass(0, omniwolfclass)
			&& CheckInventory(omniwolfammo)
			&& CheckInventory(omniwolfpistol)
			&& !CheckInventory(HXS_GetTokenString(HXMOD_OMNIWOLF)))
		{
			GiveInventory(HXS_GetTokenString(HXMOD_MODFOUND), 1);
			GiveInventory(HXS_GetTokenString(HXMOD_OMNIWOLF), 1);
			if (CheckInventory(HXS_GetTokenString(HXMOD_NONE))) { TakeInventory(HXS_GetTokenString(HXMOD_NONE), 1); }
		}
	// PerK's Smoother Weapon Animations Enhanced
		else if (CheckInventory(perkzfist)
			&& CheckInventory(perkzpistol)
			&& !CheckInventory(HXS_GetTokenString(HXMOD_PERKSMOOTHENH)))
		{
			GiveInventory(HXS_GetTokenString(HXMOD_MODFOUND), 1);
			GiveInventory(HXS_GetTokenString(HXMOD_PERKSMOOTHENH), 1);
			if (CheckInventory(HXS_GetTokenString(HXMOD_NONE))) { TakeInventory(HXS_GetTokenString(HXMOD_NONE), 1); }
		}
	// SmoothDoom 2.0 WIP
		else if (CheckActorClass(0, smoothdoomclass)
			&& CheckInventory(smoothdoomfist)
			&& CheckInventory(smoothdoompistol)
			&& !CheckInventory(HXS_GetTokenString(HXMOD_SMOOTHDOOM)))
		{
			GiveInventory(HXS_GetTokenString(HXMOD_MODFOUND), 1);
			GiveInventory(HXS_GetTokenString(HXMOD_SMOOTHDOOM), 1);
			if (CheckInventory(HXS_GetTokenString(HXMOD_NONE))) { TakeInventory(HXS_GetTokenString(HXMOD_NONE), 1); }
		}
	// Supercharge 2.8
		else if (CheckInventory(superchargefist)
			&& CheckInventory(superchargepistol)
			&& CheckInventory(superchargerifleammo)
			&& !CheckInventory(HXS_GetTokenString(HXMOD_SUPERCHARGE)))
		{
			GiveInventory(HXS_GetTokenString(HXMOD_MODFOUND), 1);
			GiveInventory(HXS_GetTokenString(HXMOD_SUPERCHARGE), 1);
			if (CheckInventory(HXS_GetTokenString(HXMOD_NONE))) { TakeInventory(HXS_GetTokenString(HXMOD_NONE), 1); }
		}
	// No mod detected
		else if (!CheckInventory(HXS_GetTokenString(HXMOD_NONE))
			&&	!CheckInventory(HXS_GetTokenString(HXMOD_MODFOUND)))
		{ GiveInventory(HXS_GetTokenString(HXMOD_NONE), 1); }
}

function void HXS_ItemManagement (int moditemcount, str hxitem, int hxitemtokens)
{
	if (moditemcount > 0 && moditemcount != hxitemtokens)
	{
		if (moditemcount > hxitemtokens) { GiveInventory(hxitem, moditemcount - hxitemtokens); }
		else if (moditemcount < hxitemtokens) { TakeInventory(hxitem, hxitemtokens - moditemcount); }
	}
	else if (moditemcount <= 0 && hxitemtokens) { TakeInventory(hxitem, hxitemtokens); }
}

function void HXS_ItemSync (str moditem, str hxitem)
{
	int moditemcount = CheckInventory(moditem);
	int hxitemcount = CheckInventory(hxitem);

	HXS_ItemManagement(moditemcount, hxitem, hxitemcount);
}

function void HXS_PowerupTimer (str moditem, str hxitem)
{
	int moditemduration = GetActorPowerupTics(0, moditem) / 35;
	int hxitemcount = CheckInventory(hxitem);

	HXS_ItemManagement(moditemduration, hxitem, hxitemcount);
}