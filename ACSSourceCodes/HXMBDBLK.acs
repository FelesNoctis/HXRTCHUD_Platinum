#library "HXMBDBLK"
#include "zcommon.acs"
#import "HXATOKEN.acs"
#import "HXAMODCM.acs"
#import "HXACVAR.acs"
#import "HXASTATS.acs"

// Brutal Doom Black Edition
	#define bdbecubeitem "SoulCube"
	#define bdbecubelvl5 "SoulCubeLvl5"
	#define bdbecubelvl4 "SoulCubeLvl4"
	#define bdbecubelvl3 "SoulCubeLvl3"
	#define bdbecubelvl2 "SoulCubeLvl2"
	#define hx_bdbedemonmodeavailabletoken "HX_BDBLK_demonmodeavailabletoken"
	#define bdbedemonmodecount "DMSoulCount"
	#define hx_bdbedemonsoulcounttoken "HX_BDBLK_demonsoulcounttoken"
	#define bdbegunnergameplaymodecvar "begunnergameplaymode"
	#define hx_bdbegunnergameplaymodetoken "HX_BDBLK_begunnergameplaymodetoken"
	#define bdbepowerbuddha "PowerBuddha"
	#define hx_bdbepowerbuddha "HX_BDBLK_buddhapoweruptoken"
	#define bdbepowerhaste "PowerD4Haste"
	#define bdbepowerironfeet "BEPowerIronFeet"
	#define bdbepowerquaddamage "PowerD4QuadDamage"
	#define bdbepowerregeneration "PowerD4Regen"
	#define hx_bdbepowerregeneration "HX_BDBLK_regenerationpoweruptoken"
	#define bdbepowertorch "BEPowerTorch"
	#define bdbestamina "Stamina"

script "HXS_BrutalDoomBlackEdition35ticHandler" enter
{
	// Wait 35 tics (1sec) before engaging, to make sure the token has been given
	delay(35);

	if (CheckInventory(HXS_GetTokenString(HXMOD_BRUTALDOOMBLACK))) {
		while (true)
		{

		// Weapon Icon Management Tokens
			HXF_CVARConvert_Generic(bdbegunnergameplaymodecvar, hx_bdbegunnergameplaymodetoken);

		// Timer
			// Wait 35 tics (~1sec) before repeating, since we want this to be a clock
			delay(35);
		}
	}
}

script "HXS_BrutalDoomBlackEdition7ticHandler" enter
{
	// Wait 35 tics (1sec) before engaging, to make sure the token has been given
	delay(35);
	
	if (CheckInventory(HXS_GetTokenString(HXMOD_BRUTALDOOMBLACK))) {
		while (true)
		{
		// Stamina Control
			HXS_StamNormal(bdbestamina, GetAmmoCapacity(bdbestamina));
		// Powerup Management Tokens
			// Berserk
			HXS_ItemSync(HXS_GetTokenString(VANILLABERSERK), HXS_GetTokenString(HXGEN_BERSERK));
			// Buddha
			HXS_PowerupTimer(bdbepowerbuddha, hx_bdbepowerbuddha);
			// Haste
			HXS_PowerupTimerManual(bdbepowerhaste, HXS_GetTokenString(HXGEN_HASTELONGTIMER), 60, HXS_GetTokenString(HXMOD_BUFFTRACKER1), 7);
			HXS_ItemSync(HXS_GetTokenString(HXGEN_HASTELONGTIMER), HXS_GetTokenString(HXGEN_HASTE));
			// Infrared
			HXS_PowerupTimer(bdbepowertorch, HXS_GetTokenString(HXGEN_INFRARED));
			// Invisibility
			HXS_PowerupTimer(HXS_GetTokenString(VANILLAINVISIBILITY), HXS_GetTokenString(HXGEN_INVISIBILITY));
			// Invulnerability
			HXS_PowerupTimer(HXS_GetTokenString(VANILLAINVULNERABILITY), HXS_GetTokenString(HXGEN_INVULNERABILITY));
			// Quad Damage
			HXS_PowerupTimerManual(bdbepowerquaddamage, HXS_GetTokenString(HXGEN_QUADDAMAGELONGTIMER), 30, HXS_GetTokenString(HXMOD_BUFFTRACKER2), 7);
			HXS_ItemSync(HXS_GetTokenString(HXGEN_QUADDAMAGELONGTIMER), HXS_GetTokenString(HXGEN_QUADDAMAGE));
			// Radsuit
			HXS_PowerupTimer(bdbepowerironfeet, HXS_GetTokenString(HXGEN_RADSUIT));
			// Regeneration
			HXS_PowerupTimerManual(bdbepowerregeneration, HXS_GetTokenString(HXGEN_REGENERATELONGTIMER), 33, HXS_GetTokenString(HXMOD_BUFFTRACKER3), 7);
			HXS_ItemSync(HXS_GetTokenString(HXGEN_REGENERATELONGTIMER), hx_bdbepowerregeneration);

		// Demon Mode Availability Check
			if	((!CheckInventory(hx_bdbedemonmodeavailabletoken))
				&&	(CheckInventory (bdbecubelvl2)
					|| CheckInventory (bdbecubelvl3)
					|| CheckInventory (bdbecubelvl4)
					|| CheckInventory (bdbecubelvl5)))
			{ GiveInventory(hx_bdbedemonmodeavailabletoken, 1); }
			else if	(CheckInventory(hx_bdbedemonmodeavailabletoken)
					&& !CheckInventory(bdbecubeitem))
			{ TakeInventory(hx_bdbedemonmodeavailabletoken, 1); }

		// Demon Mode Soul Management
			HXS_ItemSync(bdbedemonmodecount, hx_bdbedemonsoulcounttoken);

		// Timer
			// Wait 7 tics (1/5sec) before repeating, since we want this to be reasonably responsive
			delay(7);
		}
	}
}

// function void HXS_BDBE_HasteManager (void)
// {
// 	if (CheckInventory(bdbepowerhaste))
// 	{
// 		if		(!CheckInventory(HXS_GetTokenString(HXGEN_HASTELONGTIMER)))	{ GiveInventory(HXS_GetTokenString(HXGEN_HASTELONGTIMER), 300); }
// 		else if	(CheckInventory(HXS_GetTokenString(HXGEN_HASTELONGTIMER)))	{ TakeInventory(HXS_GetTokenString(HXGEN_HASTELONGTIMER), 1); }
// 	}
// 	else if (CheckInventory(HXS_GetTokenString(HXGEN_HASTELONGTIMER)))		{ TakeInventory(HXS_GetTokenString(HXGEN_HASTELONGTIMER), 9999); }
// }