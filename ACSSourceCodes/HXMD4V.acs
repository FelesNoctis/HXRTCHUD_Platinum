#library "HXMD4V"
#include "zcommon.acs"
#import "HXATOKEN.acs"
#import "HXAMODCM.acs"
#import "HXACVAR.acs"

// Doom 4 Vanilla
	#define d4v_catoggle "catoggle"
	#define d4v_chtoggle "chtoggle"
	#define d4v_pstoggle "pstoggle"
	#define d4v_putoggle "putoggle"
	#define d4v_rotoggle "rotoggle"
	#define d4v_sgtoggle "sgtoggle"
	#define d4v_sstoggle "sstoggle"
	#define d4v_swtoggle "swtoggle"
	#define hx_d4vcatoggletoken "HX_D4V_catoggletoken"
	#define hx_d4vchtoggletoken "HX_D4V_chtoggletoken"
	#define hx_d4vpstoggletoken "HX_D4V_pstoggletoken"
	#define hx_d4vputoggletoken "HX_D4V_putoggletoken"
	#define hx_d4vrotoggletoken "HX_D4V_rotoggletoken"
	#define hx_d4vsgtoggletoken "HX_D4V_sgtoggletoken"
	#define hx_d4vsstoggletoken "HX_D4V_sstoggletoken"
	#define hx_d4vswtoggletoken "HX_D4V_swtoggletoken"

script "HXS_Doom4Vanilla35ticHandler" enter
{
	// Wait 35 tics (1sec) before engaging, to make sure the token has been given
	delay(35);

	if (CheckInventory(HXS_GetTokenString(HXMOD_D4V))) {
		while (true)
		{
/* 		// Key Management Tokens
			// Blue Keys
			HXS_ItemSync(vanillabluecard, hxgen_bluecard);
			HXS_ItemSync(vanillablueskull, hxgen_blueskull);
			// Red Keys
			HXS_ItemSync(vanillaredcard, hxgen_redcard);
			HXS_ItemSync(vanillaredskull, hxgen_redskull);
			// Yellow Keys
			HXS_ItemSync(vanillayellowcard, hxgen_yellowcard);
			HXS_ItemSync(vanillayellowskull, hxgen_yellowskull); */

		// Powerup Management Tokens
			// Berserk
			HXS_ItemSync(HXS_GetTokenString(VANILLABERSERK), HXS_GetTokenString(HXGEN_BERSERK));

		// Weapon Icon Management Tokens
			HXF_CVARConvert_Generic(d4v_catoggle, hx_d4vcatoggletoken);
			HXF_CVARConvert_Generic(d4v_chtoggle, hx_d4vchtoggletoken);
			HXF_CVARConvert_Generic(d4v_pstoggle, hx_d4vpstoggletoken);
			HXF_CVARConvert_Generic(d4v_putoggle, hx_d4vputoggletoken);
			HXF_CVARConvert_Generic(d4v_rotoggle, hx_d4vrotoggletoken);
			HXF_CVARConvert_Generic(d4v_sgtoggle, hx_d4vsgtoggletoken);
			HXF_CVARConvert_Generic(d4v_sstoggle, hx_d4vsstoggletoken);
			HXF_CVARConvert_Generic(d4v_swtoggle, hx_d4vswtoggletoken);

		// Timer
			// Wait 35 tics (~1sec) before repeating, since we want this to be a clock
			delay(35);
		}
	}
}

script "HXS_Doom4Vanilla7ticHandler" enter
{
	// Wait 35 tics (1sec) before engaging, to make sure the token has been given
	delay(35);
	
	if (CheckInventory(HXS_GetTokenString(HXMOD_D4V))) {
		while (true)
		{
		// Powerup Management Tokens
			// Infrared (Unused)
			/* HXS_PowerupTimer(HXS_GetTokenString(VANILLAINFRARED), HXS_GetTokenString(HXGEN_INFRARED)); */
			// Invisibility (Unused)
			/* HXS_PowerupTimer(HXS_GetTokenString(VANILLAINVISIBILITY), HXS_GetTokenString(HXGEN_INVISIBILITY)); */
			// Invulnerability
			HXS_PowerupTimer(HXS_GetTokenString(VANILLAINVULNERABILITY), HXS_GetTokenString(HXGEN_INVULNERABILITY));
			// Radsuit
			HXS_PowerupTimer(HXS_GetTokenString(VANILLARADSUIT), HXS_GetTokenString(HXGEN_RADSUIT));

		// Timer
			// Wait 7 tics (1/5sec) before repeating, since we want this to be reasonably responsive
			delay(7);
		}
	}
}